{"ast":null,"code":"/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\n\nexport function makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n/**\n * Converts blob to array buffer\n */\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n\n    reader.onerror = function (err) {\n      rej(err);\n    };\n\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}","map":{"version":3,"sources":["../../src/Providers/Utils.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAqC,IAArC,EAAoD;EACzD,IAAI,CAAC,GAAL,EAAU,OAAO,SAAP;EACV,IAAM,MAAM,GAAG,EAAf;EACA,IAAM,YAAY,GAAG,IAAI,GAAG,IAAH,GAAU,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAnC;EACA,YAAY,CAAC,OAAb,CAAqB,UAAA,GAAA,EAAG;;;IACvB,IAAI,GAAG,CAAC,cAAJ,CAAmB,GAAnB,CAAJ,EAA6B;MAC5B;MACA,IAAM,YAAY,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,WAAd,KAA8B,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAnD;MACA,MAAM,CAAC,MAAP,CAAc,MAAd,GAAoB,EAAA,GAAA,EAAA,EAAI,EAAA,CAAC,YAAD,CAAA,GAAgB,GAAG,CAAC,GAAD,CAAvB,EAA4B,EAAhD;IACA;EACD,CAND;EAOA,OAAO,MAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAA+C,IAA/C,EAA8D;EACnE,IAAI,CAAC,MAAL,EAAa,OAAO,SAAP;EACb,OAAO,MAAM,CAAC,GAAP,CAAW,UAAA,GAAA,EAAG;IAAI,OAAA,aAAa,CAAC,GAAD,EAAb,IAAa,CAAb;EAAwB,CAA1C,CAAP;AACA;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAsC;EAC3C,OAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;IAC3B,IAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;IACA,MAAM,CAAC,MAAP,GAAgB,UAAA,MAAA,EAAM;MACrB,GAAG,CAAC,MAAM,CAAC,MAAR,CAAH;IACA,CAFD;;IAGA,MAAM,CAAC,OAAP,GAAiB,UAAA,GAAA,EAAG;MACnB,GAAG,CAAC,GAAD,CAAH;IACA,CAFD;;IAGA,IAAI;MACH,MAAM,CAAC,iBAAP,CAAyB,IAAzB;IACA,CAFD,CAEE,OAAO,GAAP,EAAY;MACb,GAAG,CAAC,GAAD,CAAH,CADa,CACH;IACV;EACD,CAbM,CAAP;AAcA","sourceRoot":"","sourcesContent":["/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n    if (!obj)\n        return undefined;\n    var newObj = {};\n    var keysToRename = keys ? keys : Object.keys(obj);\n    keysToRename.forEach(function (key) {\n        var _a;\n        if (obj.hasOwnProperty(key)) {\n            // change the key to camelcase.\n            var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n            Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n        }\n    });\n    return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr, keys) {\n    if (!objArr)\n        return undefined;\n    return objArr.map(function (obj) { return makeCamelCase(obj, keys); });\n}\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob) {\n    return new Promise(function (res, rej) {\n        var reader = new FileReader();\n        reader.onload = function (_event) {\n            res(reader.result);\n        };\n        reader.onerror = function (err) {\n            rej(err);\n        };\n        try {\n            reader.readAsArrayBuffer(blob);\n        }\n        catch (err) {\n            rej(err); // in case user gives invalid type\n        }\n    });\n}\n//# sourceMappingURL=Utils.js.map"]},"metadata":{},"sourceType":"module"}