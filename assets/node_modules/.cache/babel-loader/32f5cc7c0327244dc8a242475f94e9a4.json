{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in \") + \"position expecting type \\\"\".concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node,\n                type = _ref2.type,\n                defaultValue = _ref2.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"names":["inspect","GraphQLError","Kind","isNonNullType","isTypeSubTypeOf","typeFromAST","badVarPosMessage","varName","varType","expectedType","concat","VariablesInAllowedPosition","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref2","value","node","type","defaultValue","name","varDef","schema","getSchema","allowedVariableUsage","reportError","err","return","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","nullableLocationType","ofType"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/rules/VariablesInAllowedPosition.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in \") + \"position expecting type \\\"\".concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node,\n                type = _ref2.type,\n                defaultValue = _ref2.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}