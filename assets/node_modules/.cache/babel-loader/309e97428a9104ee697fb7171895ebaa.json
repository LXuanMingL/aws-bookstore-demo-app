{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\n\nvar InMemoryCache =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCache, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n\n\n  function InMemoryCache(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this); // initialize list for every priority\n\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  InMemoryCache.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey); // decrease the current size of the cache\n\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize); // finally remove the item from memory\n\n\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey); // increase the current size of the cache\n\n    this._increaseCurSizeInBytes(item.byteSize); // finally add the item into memory\n\n\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  InMemoryCache.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n\n\n  InMemoryCache.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n\n\n  InMemoryCache.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    } // if key already in the cache, then delete it.\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    } // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n\n\n    var cacheListIdx = this.maxPriority - 1;\n\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n\n\n  InMemoryCache.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    } // check whether it's in the cachelist\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n\n      return val;\n    }\n\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n\n\n  InMemoryCache.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key; // check if the key is in the cache\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n\n\n  InMemoryCache.prototype.clear = function () {\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        this._removeItem(key, i);\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n\n\n  InMemoryCache.prototype.getAllKeys = function () {\n    var keys = [];\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n\n\n  InMemoryCache.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n\n\n  InMemoryCache.prototype.createInstance = function (config) {\n    return new InMemoryCache(config);\n  };\n\n  return InMemoryCache;\n}(StorageCache);\n\nexport { InMemoryCache };\nvar instance = new InMemoryCache();\nexport default instance;","map":{"version":3,"sources":["../src/InMemoryCache.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCache = /** @class */ (function (_super) {\n    __extends(InMemoryCache, _super);\n    /**\n     * initialize the cache\n     *\n     * @param config - the configuration of the cache\n     */\n    function InMemoryCache(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        logger.debug('now we start!');\n        _this.cacheList = [];\n        _this.curSizeInBytes = 0;\n        _this.maxPriority = 5;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        // initialize list for every priority\n        for (var i = 0; i < _this.maxPriority; i += 1) {\n            _this.cacheList[i] = new CacheList();\n        }\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes -= amount;\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes += amount;\n    };\n    /**\n     * check whether item is expired\n     *\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    InMemoryCache.prototype._isExpired = function (key) {\n        var text = CacheObject.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n        // delete the key from the list\n        this.cacheList[listIdx].removeItem(prefixedKey);\n        // decrease the current size of the cache\n        this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n        // finally remove the item from memory\n        CacheObject.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n        // insert the key into the list\n        this.cacheList[listIdx].insertItem(prefixedKey);\n        // increase the current size of the cache\n        this._increaseCurSizeInBytes(item.byteSize);\n        // finally add the item into memory\n        CacheObject.setItem(prefixedKey, JSON.stringify(item));\n    };\n    /**\n     * see whether cache is full\n     *\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    InMemoryCache.prototype._isCacheFull = function (itemSize) {\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n    };\n    /**\n     * check whether the cache contains the key\n     *\n     * @param key\n     */\n    InMemoryCache.prototype.containsKey = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            if (this.cacheList[i].containsKey(prefixedKey)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    };\n    /**\n     * * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param options - optional, the specified meta-data\n     *\n     * @throws if the item is too big which exceeds the limit of single item size\n     * @throws if the key is invalid\n     */\n    InMemoryCache.prototype.setItem = function (key, value, options) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        // if key already in the cache, then delete it.\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n        // pop out items in the cache when cache is full based on LRU\n        // first start from lowest priority cache list\n        var cacheListIdx = this.maxPriority - 1;\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n                this._removeItem(popedItemKey, cacheListIdx);\n            }\n            else {\n                cacheListIdx -= 1;\n            }\n        }\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     *\n     * @param key - the key of the item\n     * @param options - the options of callback function\n     */\n    InMemoryCache.prototype.getItem = function (key, options) {\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        // check whether it's in the cachelist\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            if (this._isExpired(prefixedKey)) {\n                // if expired, remove that item and return null\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\n            }\n            else {\n                // if not expired, great, return the value and refresh it\n                ret = CacheObject.getItem(prefixedKey);\n                var item = JSON.parse(ret);\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\n                return item.data;\n            }\n        }\n        if (options && options.callback !== undefined) {\n            var val = options.callback();\n            if (val !== null) {\n                this.setItem(key, val, options);\n            }\n            return val;\n        }\n        return null;\n    };\n    /**\n     * remove item from the cache\n     *\n     * @param key - the key of the item\n     */\n    InMemoryCache.prototype.removeItem = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // check if the key is in the cache\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n    };\n    /**\n     * clear the entire cache\n     */\n    InMemoryCache.prototype.clear = function () {\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                this._removeItem(key, i);\n            }\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     */\n    InMemoryCache.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return the current size of the cache\n     */\n    InMemoryCache.prototype.getCacheCurSize = function () {\n        return this.curSizeInBytes;\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     */\n    InMemoryCache.prototype.createInstance = function (config) {\n        return new InMemoryCache(config);\n    };\n    return InMemoryCache;\n}(StorageCache));\nexport { InMemoryCache };\nvar instance = new InMemoryCache();\nexport default instance;\n//# sourceMappingURL=InMemoryCache.js.map"]},"metadata":{},"sourceType":"module"}