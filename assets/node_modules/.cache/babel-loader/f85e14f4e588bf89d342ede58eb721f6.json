{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar DoubleLinkedNode =\n/** @class */\nfunction () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n\n  return DoubleLinkedNode;\n}();\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\n\n\nvar CacheList =\n/** @class */\nfunction () {\n  /**\n   * initialization\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\n   * insert node to the head of the list\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\n   * remove node\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\n   * @return true if list is empty\n   */\n\n\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\n   * refresh node so it is rotated to the head\n   *\n   * @param key - key of the node\n   */\n\n\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\n   * insert new node to the head and add it in the hashtable\n   *\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\n   * @return the LAST Recently Visited key\n   */\n\n\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\n   * remove the cache key from the list and hashtable\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\n   * @return length of the list\n   */\n\n\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\n   * @return true if the key is in the hashtable\n   * @param key\n   */\n\n\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\n   * clean up the list and hashtable\n   */\n\n\n  CacheList.prototype.clearList = function () {\n    for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (this.hashtable.hasOwnProperty(key)) {\n        delete this.hashtable[key];\n      }\n    }\n\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\n   * @return all keys in the hashtable\n   */\n\n\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the head node\n   */\n\n\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the tail node\n   */\n\n\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n\n  return CacheList;\n}();\n\nexport default CacheList;","map":{"version":3,"sources":["../../src/Utils/CacheList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar DoubleLinkedNode = /** @class */ (function () {\n    function DoubleLinkedNode(keyVal) {\n        this.key = keyVal ? keyVal : '';\n        this.prevNode = null;\n        this.nextNode = null;\n    }\n    return DoubleLinkedNode;\n}());\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\nvar CacheList = /** @class */ (function () {\n    /**\n     * initialization\n     */\n    function CacheList() {\n        this.head = new DoubleLinkedNode();\n        this.tail = new DoubleLinkedNode();\n        this.hashtable = {};\n        this.length = 0;\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n    }\n    /**\n     * insert node to the head of the list\n     *\n     * @param node\n     */\n    CacheList.prototype.insertNodeToHead = function (node) {\n        var tmp = this.head.nextNode;\n        this.head.nextNode = node;\n        node.nextNode = tmp;\n        node.prevNode = this.head;\n        tmp.prevNode = node;\n        this.length = this.length + 1;\n    };\n    /**\n     * remove node\n     *\n     * @param node\n     */\n    CacheList.prototype.removeNode = function (node) {\n        node.prevNode.nextNode = node.nextNode;\n        node.nextNode.prevNode = node.prevNode;\n        node.prevNode = null;\n        node.nextNode = null;\n        this.length = this.length - 1;\n    };\n    /**\n     * @return true if list is empty\n     */\n    CacheList.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    /**\n     * refresh node so it is rotated to the head\n     *\n     * @param key - key of the node\n     */\n    CacheList.prototype.refresh = function (key) {\n        var node = this.hashtable[key];\n        this.removeNode(node);\n        this.insertNodeToHead(node);\n    };\n    /**\n     * insert new node to the head and add it in the hashtable\n     *\n     * @param key - the key of the node\n     */\n    CacheList.prototype.insertItem = function (key) {\n        var node = new DoubleLinkedNode(key);\n        this.hashtable[key] = node;\n        this.insertNodeToHead(node);\n    };\n    /**\n     * @return the LAST Recently Visited key\n     */\n    CacheList.prototype.getLastItem = function () {\n        return this.tail.prevNode.key;\n    };\n    /**\n     * remove the cache key from the list and hashtable\n     * @param key - the key of the node\n     */\n    CacheList.prototype.removeItem = function (key) {\n        var removedItem = this.hashtable[key];\n        this.removeNode(removedItem);\n        delete this.hashtable[key];\n    };\n    /**\n     * @return length of the list\n     */\n    CacheList.prototype.getSize = function () {\n        return this.length;\n    };\n    /**\n     * @return true if the key is in the hashtable\n     * @param key\n     */\n    CacheList.prototype.containsKey = function (key) {\n        return key in this.hashtable;\n    };\n    /**\n     * clean up the list and hashtable\n     */\n    CacheList.prototype.clearList = function () {\n        for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (this.hashtable.hasOwnProperty(key)) {\n                delete this.hashtable[key];\n            }\n        }\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n        this.length = 0;\n    };\n    /**\n     * @return all keys in the hashtable\n     */\n    CacheList.prototype.getKeys = function () {\n        return Object.keys(this.hashtable);\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the head node\n     */\n    CacheList.prototype.isHeadNode = function (key) {\n        var node = this.hashtable[key];\n        return node.prevNode === this.head;\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the tail node\n     */\n    CacheList.prototype.isTailNode = function (key) {\n        var node = this.hashtable[key];\n        return node.nextNode === this.tail;\n    };\n    return CacheList;\n}());\nexport default CacheList;\n//# sourceMappingURL=CacheList.js.map"]},"metadata":{},"sourceType":"module"}