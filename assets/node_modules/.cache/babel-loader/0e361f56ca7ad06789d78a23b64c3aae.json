{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.aws_lex = new LexRuntime({\n      region: _this._config.region\n    });\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n    var _this = this;\n\n    if (err) {\n      rej(err);\n      return;\n    } else {\n      // Check if state is fulfilled to resolve onFullfilment promise\n      logger.debug('postContent state', data.dialogState);\n\n      if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname](null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete(null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n      }\n\n      res(data);\n\n      if (data.dialogState === 'Failed') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname]('Bot conversation failed');\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete('Bot conversation failed');\n          }, 0);\n        }\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, params;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._config[botname]) {\n                return [2\n                /*return*/\n                , rej('Bot ' + botname + ' does not exist')];\n              }\n\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _a.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              AWS.config.update({\n                credentials: credentials\n              });\n              this.aws_lex = new LexRuntime({\n                region: this._config[botname].region,\n                credentials: credentials\n              });\n\n              if (typeof message === 'string') {\n                params = {\n                  botAlias: this._config[botname].alias,\n                  botName: botname,\n                  inputText: message,\n                  userId: credentials.identityId\n                };\n                logger.debug('postText to lex', message);\n                this.aws_lex.postText(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              } else {\n                if (message.options['messageType'] === 'voice') {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'audio/x-l16; sample-rate=16000',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                } else {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'text/plain; charset=utf-8',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                }\n\n                logger.debug('postContent to lex', message);\n                this.aws_lex.postContent(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.aws_lex = new LexRuntime({ region: _this._config.region });\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n        var _this = this;\n        if (err) {\n            rej(err);\n            return;\n        }\n        else {\n            // Check if state is fulfilled to resolve onFullfilment promise\n            logger.debug('postContent state', data.dialogState);\n            if (data.dialogState === 'ReadyForFulfillment' ||\n                data.dialogState === 'Fulfilled') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () {\n                        return _this._botsCompleteCallback[botname](null, { slots: data.slots });\n                    }, 0);\n                }\n                if (this._config &&\n                    typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);\n                }\n            }\n            res(data);\n            if (data.dialogState === 'Failed') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () {\n                        return _this._botsCompleteCallback[botname]('Bot conversation failed');\n                    }, 0);\n                }\n                if (this._config &&\n                    typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n                }\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, params;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        AWS.config.update({\n                            credentials: credentials,\n                        });\n                        this.aws_lex = new LexRuntime({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                        });\n                        if (typeof message === 'string') {\n                            params = {\n                                botAlias: this._config[botname].alias,\n                                botName: botname,\n                                inputText: message,\n                                userId: credentials.identityId,\n                            };\n                            logger.debug('postText to lex', message);\n                            this.aws_lex.postText(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        else {\n                            if (message.options['messageType'] === 'voice') {\n                                params = {\n                                    botAlias: this._config[botname].alias,\n                                    botName: botname,\n                                    contentType: 'audio/x-l16; sample-rate=16000',\n                                    inputStream: message.content,\n                                    userId: credentials.identityId,\n                                    accept: 'audio/mpeg',\n                                };\n                            }\n                            else {\n                                params = {\n                                    botAlias: this._config[botname].alias,\n                                    botName: botname,\n                                    contentType: 'text/plain; charset=utf-8',\n                                    inputStream: message.content,\n                                    userId: credentials.identityId,\n                                    accept: 'audio/mpeg',\n                                };\n                            }\n                            logger.debug('postContent to lex', message);\n                            this.aws_lex.postContent(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        if (!this._config[botname]) {\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n//# sourceMappingURL=AWSLexProvider.js.map"]},"metadata":{},"sourceType":"module"}