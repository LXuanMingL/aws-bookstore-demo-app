{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\n\nvar AWSAppSyncProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncProvider, _super);\n\n  function AWSAppSyncProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._topicClient = new Map();\n    _this._topicAlias = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n    get: function get() {\n      throw new Error('Not supported');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncProvider';\n  };\n\n  AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n    var _this = this;\n\n    var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n      var c = _a[1];\n      return c.clientId === clientId;\n    }).map(function (_a) {\n      var t = _a[0];\n      return t;\n    });\n    topicsForClient.forEach(function (t) {\n      return _this._cleanUpForTopic(t);\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n    this._topicClient.delete(topic);\n\n    this._topicAlias.delete(topic);\n  };\n\n  AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n        var c = _a[1];\n        return c.clientId === clientId;\n      }).map(function (_a) {\n        var t = _a[0];\n        return t;\n      });\n      topicsForClient.forEach(function (topic) {\n        if (_this._topicObservers.has(topic)) {\n          _this._topicObservers.get(topic).forEach(function (obs) {\n            if (!obs.closed) {\n              obs.error(args);\n            }\n          });\n\n          _this._topicObservers.delete(topic);\n        }\n      });\n\n      this._cleanUp(clientId);\n    }\n  };\n\n  AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , _super.prototype.disconnect.call(this, clientId)];\n\n          case 2:\n            _a.sent();\n\n            this._cleanUp(clientId);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new Observable(function (observer) {\n      var targetTopics = [].concat(topics);\n      logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mqttConnections, newSubscriptions, newAliases, map;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                // Add these topics to map\n                targetTopics.forEach(function (t) {\n                  if (!_this._topicObservers.has(t)) {\n                    _this._topicObservers.set(t, new Set());\n                  }\n\n                  _this._topicObservers.get(t).add(observer);\n                });\n                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                  var alias = _a[0],\n                      v = _a[1];\n                  return [v.topic, alias];\n                }); // Merge new aliases with old ones\n\n                this._topicAlias = new Map(__spreadArrays(Array.from(this._topicAlias.entries()), newAliases));\n                map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                  var connectionInfoForTopic = mqttConnections.find(function (c) {\n                    return c.topics.indexOf(elem) > -1;\n                  });\n\n                  if (connectionInfoForTopic) {\n                    var clientId = connectionInfoForTopic.client,\n                        url = connectionInfoForTopic.url;\n\n                    if (!acc[clientId]) {\n                      acc[clientId] = {\n                        url: url,\n                        topics: new Set()\n                      };\n                    }\n\n                    acc[clientId].topics.add(elem);\n                  }\n\n                  return acc;\n                }, {})); // reconnect everything we have in the map\n\n                return [4\n                /*yield*/\n                , Promise.all(map.map(function (_a) {\n                  var clientId = _a[0],\n                      _b = _a[1],\n                      url = _b.url,\n                      topics = _b.topics;\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var client, err_1;\n\n                    var _this = this;\n\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          client = null;\n                          _c.label = 1;\n\n                        case 1:\n                          _c.trys.push([1, 3,, 4]);\n\n                          return [4\n                          /*yield*/\n                          , this.connect(clientId, {\n                            clientId: clientId,\n                            url: url\n                          })];\n\n                        case 2:\n                          client = _c.sent();\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 3:\n                          err_1 = _c.sent();\n                          observer.error({\n                            message: 'Failed to connect',\n                            error: err_1\n                          });\n                          observer.complete();\n                          return [2\n                          /*return*/\n                          , undefined];\n\n                        case 4:\n                          // subscribe to all topics for this client\n                          // store topic-client mapping\n                          topics.forEach(function (topic) {\n                            if (client.isConnected()) {\n                              client.subscribe(topic);\n\n                              _this._topicClient.set(topic, client);\n                            }\n                          });\n                          return [2\n                          /*return*/\n                          , client];\n                      }\n                    });\n                  });\n                }))];\n\n              case 1:\n                // reconnect everything we have in the map\n                _b.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        targetTopics.forEach(function (t) {\n          var client = _this._topicClient.get(t);\n\n          if (client && client.isConnected()) {\n            client.unsubscribe(t);\n\n            _this._topicClient.delete(t);\n\n            if (!Array.from(_this._topicClient.values()).some(function (c) {\n              return c === client;\n            })) {\n              _this.disconnect(client.clientId);\n            }\n          }\n\n          _this._topicObservers.delete(t);\n        });\n      };\n    });\n    return Observable.from(result).map(function (value) {\n      var topic = _this.getTopicForValue(value);\n\n      var alias = _this._topicAlias.get(topic);\n\n      value.data = Object.entries(value.data).reduce(function (obj, _a) {\n        var origKey = _a[0],\n            val = _a[1];\n        return obj[alias || origKey] = val, obj;\n      }, {});\n      return value;\n    });\n  };\n\n  return AWSAppSyncProvider;\n}(MqttOverWSProvider);\n\nexport { AWSAppSyncProvider };","map":{"version":3,"sources":["../../src/Providers/AWSAppSyncProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,KAAK,UAAZ,MAA4B,gBAA5B;AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,mBAAxC;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,oBAAX,CAAf;;AAEA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAwC,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;EAAxC,SAAA,kBAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;IAgDS,KAAA,CAAA,YAAA,GAAoC,IAAI,GAAJ,EAApC;IAEA,KAAA,CAAA,WAAA,GAAmC,IAAI,GAAJ,EAAnC;;EAoIR;;EArLA,MAAA,CAAA,cAAA,CAAc,kBAAA,CAAA,SAAd,EAAc,UAAd,EAAsB;SAAtB,eAAA;MACC,MAAM,IAAI,KAAJ,CAAU,eAAV,CAAN;IACA,CAFqB;oBAAA;;EAAA,CAAtB;;EAIA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;IACC,OAAO,oBAAP;EACA,CAFD;;EAIa,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UAAqB,MAArB,EAAgD,GAAhD,EAA0D,OAA1D,EAAuE;;;QACtE,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;;;EACA,CAFY;;EAIL,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,QAAjB,EAAiC;IAAjC,IAAA,KAAA,GAAA,IAAA;;IACC,IAAM,eAAe,GAAG,KAAK,CAAC,IAAN,CAAW,KAAK,YAAL,CAAkB,OAAlB,EAAX,EACtB,MADsB,CACf,UAAC,EAAD,EAAM;UAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;MAAO,OAAA,CAAC,CAAC,QAAF,KAAe,QAAf;IAAuB,CADnB,EAEtB,GAFsB,CAElB,UAAC,EAAD,EAAI;UAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;MAAO,OAAA,CAAA;IAAC,CAFQ,CAAxB;IAIA,eAAe,CAAC,OAAhB,CAAwB,UAAA,CAAA,EAAC;MAAI,OAAA,KAAI,CAAC,gBAAL,CAAA,CAAA,CAAA;IAAwB,CAArD;EACA,CANO;;EAQA,kBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,KAAzB,EAA8B;IAC7B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,KAAzB;;IACA,KAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAxB;EACA,CAHO;;EAKD,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,EAApB,EAAoD;IAApD,IAAA,KAAA,GAAA,IAAA;;IAAsB,IAAA,QAAA,GAAA,EAAA,CAAA,QAAA;IAAA,IAAU,SAAA,GAAA,EAAA,CAAA,SAAV;IAAA,IAAqB,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,WAAA,CAAA,CAArB;;IACrB,IAAI,SAAS,KAAK,CAAlB,EAAqB;MACpB,IAAM,eAAe,GAAG,KAAK,CAAC,IAAN,CAAW,KAAK,YAAL,CAAkB,OAAlB,EAAX,EACtB,MADsB,CACf,UAAC,EAAD,EAAM;YAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;QAAO,OAAA,CAAC,CAAC,QAAF,KAAe,QAAf;MAAuB,CADnB,EAEtB,GAFsB,CAElB,UAAC,EAAD,EAAI;YAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;QAAO,OAAA,CAAA;MAAC,CAFQ,CAAxB;MAIA,eAAe,CAAC,OAAhB,CAAwB,UAAA,KAAA,EAAK;QAC5B,IAAI,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,KAAzB,CAAJ,EAAqC;UACpC,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,KAAzB,EAAgC,OAAhC,CAAwC,UAAA,GAAA,EAAG;YAC1C,IAAI,CAAC,GAAG,CAAC,MAAT,EAAiB;cAChB,GAAG,CAAC,KAAJ,CAAU,IAAV;YACA;UACD,CAJD;;UAMA,KAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B,KAA5B;QACA;MACD,CAVD;;MAYA,KAAK,QAAL,CAAc,QAAd;IACA;EACD,CApBM;;EA0BS,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAhB,UAA2B,QAA3B,EAA2C;;;;;;YAC3B,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,YAAL,CAAkB,GAAlB,CAAsB,QAAtB,EAAgC,YAAA;cAAM,OAAA,IAAA;YAAI,CAA1C,CAAN,CAAA;;;YAAT,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;YAEN,OAAA,CAAA;YAAA;YAAA,EAAM,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,EAAiB,QAAjB,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YAEA,KAAK,QAAL,CAAc,QAAd;;;;;;;;EACA,CANe;;EAQhB,kBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAqC,OAArC,EAAsD;IAAtD,IAAA,KAAA,GAAA,IAAA;;IAAqC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,EAAA;IAAiB;;IACrD,IAAM,MAAM,GAAG,IAAI,UAAJ,CAAoB,UAAA,QAAA,EAAQ;MAC1C,IAAM,YAAY,GAAI,GAAgB,MAAhB,CAAuB,MAAvB,CAAtB;MACA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,YAAY,CAAC,IAAb,CAAkB,GAAlB,CAAxC;;MAEA,CAAC,YAAA;QAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;gBACA;gBACA,YAAY,CAAC,OAAb,CAAqB,UAAA,CAAA,EAAC;kBACrB,IAAI,CAAC,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,CAAzB,CAAL,EAAkC;oBACjC,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,CAAzB,EAA4B,IAAI,GAAJ,EAA5B;kBACA;;kBAED,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,CAAzB,EAA4B,GAA5B,CAAgC,QAAhC;gBACA,CAND;gBAQQ,EAAA,GAA2C,OAAO,CAA9B,eAApB,EAAA,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAApB,EAAsB,gBAAgB,GAAK,OAAO,CAAZ,gBAAtC;gBAGF,UAAU,GAAG,MAAM,CAAC,OAAP,CAAe,gBAAf,EAAiC,GAAjC,CAClB,UAAC,EAAD,EAAwC;sBAAtC,KAAA,GAAA,EAAA,CAAA,CAAA,C;sBAAO,CAAA,GAAA,EAAA,CAAA,CAAA,C;kBAAoC,OAAA,CAAC,CAAC,CAAC,KAAH,EAAU,KAAV,CAAA;gBAAgB,CAD3C,CAAb,C,CAIN;;gBACA,KAAK,WAAL,GAAmB,IAAI,GAAJ,CAAO,cAAA,CACtB,KAAK,CAAC,IAAN,CAAW,KAAK,WAAL,CAAiB,OAAjB,EAAX,CADsB,EAErB,UAFqB,CAAP,CAAnB;gBAMM,GAAG,GAGH,MAAM,CAAC,OAAP,CACL,YAAY,CAAC,MAAb,CAAoB,UAAC,GAAD,EAAM,IAAN,EAAU;kBAC7B,IAAM,sBAAsB,GAAG,eAAe,CAAC,IAAhB,CAC9B,UAAA,CAAA,EAAC;oBAAI,OAAA,CAAC,CAAC,MAAF,CAAS,OAAT,CAAiB,IAAjB,IAAyB,CAAzB,CAAA;kBAA2B,CADF,CAA/B;;kBAIA,IAAI,sBAAJ,EAA4B;oBACnB,IAAA,QAAA,GAAA,sBAAA,CAAA,MAAA;oBAAA,IAAkB,GAAA,GAAA,sBAAA,CAAA,GAAlB;;oBAER,IAAI,CAAC,GAAG,CAAC,QAAD,CAAR,EAAoB;sBACnB,GAAG,CAAC,QAAD,CAAH,GAAgB;wBACf,GAAG,EAAA,GADY;wBAEf,MAAM,EAAE,IAAI,GAAJ;sBAFO,CAAhB;oBAIA;;oBAED,GAAG,CAAC,QAAD,CAAH,CAAc,MAAd,CAAqB,GAArB,CAAyB,IAAzB;kBACA;;kBAED,OAAO,GAAP;gBACA,CAnBD,EAmBG,EAnBH,CADK,CAHA,C,CA0BN;;gBACA,OAAA,CAAA;gBAAA;gBAAA,EAAM,OAAO,CAAC,GAAR,CACL,GAAG,CAAC,GAAJ,CAAQ,UAAO,EAAP,EAAkC;sBAA1B,QAAA,GAAA,EAAA,CAAA,CAAA,C;sBAAU,EAAA,GAAA,EAAA,CAAA,CAAA,C;sBAAE,GAAA,GAAA,EAAA,CAAA,G;sBAAK,MAAA,GAAA,EAAA,CAAA,M;;;;;;;;;0BAE5B,MAAM,GAAG,IAAT;;;;;;0BAEM,OAAA,CAAA;0BAAA;0BAAA,EAAM,KAAK,OAAL,CAAa,QAAb,EAAuB;4BACrC,QAAQ,EAAA,QAD6B;4BAErC,GAAG,EAAA;0BAFkC,CAAvB,CAAN,CAAA;;;0BAAT,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;;;;;;;0BAKA,QAAQ,CAAC,KAAT,CAAe;4BAAE,OAAO,EAAE,mBAAX;4BAAgC,KAAK,EAAE;0BAAvC,CAAf;0BACA,QAAQ,CAAC,QAAT;0BACA,OAAA,CAAA;0BAAA;0BAAA,EAAO,SAAP,CAAA;;;0BAGD;0BACA;0BACA,MAAM,CAAC,OAAP,CAAe,UAAA,KAAA,EAAK;4BACnB,IAAI,MAAM,CAAC,WAAP,EAAJ,EAA0B;8BACzB,MAAM,CAAC,SAAP,CAAiB,KAAjB;;8BAEA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAtB,EAA6B,MAA7B;4BACA;0BACD,CAND;0BAQA,OAAA,CAAA;0BAAA;0BAAA,EAAO,MAAP,CAAA;;;;gBACA,CAzBD,CADK,CAAN,CAAA;;;gBADA;gBACA,EAAA,CAAA,IAAA;;;;;;;SAnDA,CAAA;MA+EA,CA/ED;;MAiFA,OAAO,YAAA;QACN,MAAM,CAAC,KAAP,CAAa,6BAAb,EAA4C,YAAY,CAAC,IAAb,CAAkB,GAAlB,CAA5C;QAEA,YAAY,CAAC,OAAb,CAAqB,UAAA,CAAA,EAAC;UACrB,IAAM,MAAM,GAAG,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,CAAtB,CAAf;;UAEA,IAAI,MAAM,IAAI,MAAM,CAAC,WAAP,EAAd,EAAoC;YACnC,MAAM,CAAC,WAAP,CAAmB,CAAnB;;YACA,KAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,CAAzB;;YAEA,IACC,CAAC,KAAK,CAAC,IAAN,CAAW,KAAI,CAAC,YAAL,CAAkB,MAAlB,EAAX,EAAuC,IAAvC,CAA4C,UAAA,CAAA,EAAC;cAAI,OAAA,CAAC,KAAD,MAAA;YAAY,CAA7D,CADF,EAEE;cACD,KAAI,CAAC,UAAL,CAAgB,MAAM,CAAC,QAAvB;YACA;UACD;;UAED,KAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B,CAA5B;QACA,CAfD;MAgBA,CAnBD;IAoBA,CAzGc,CAAf;IA2GA,OAAO,UAAU,CAAC,IAAX,CAAgB,MAAhB,EAAwB,GAAxB,CAA4B,UAAA,KAAA,EAAK;MACvC,IAAM,KAAK,GAAG,KAAI,CAAC,gBAAL,CAAsB,KAAtB,CAAd;;MACA,IAAM,KAAK,GAAG,KAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAArB,CAAd;;MAEA,KAAK,CAAC,IAAN,GAAa,MAAM,CAAC,OAAP,CAAe,KAAK,CAAC,IAArB,EAA2B,MAA3B,CACZ,UAAC,GAAD,EAAM,EAAN,EAAoB;YAAb,OAAA,GAAA,EAAA,CAAA,CAAA,C;YAAS,GAAA,GAAA,EAAA,CAAA,CAAA,C;QAAS,OACvB,GAAG,CAAE,KAAK,IAAI,OAAX,CAAH,GAAoC,GAArC,EAA2C,GADnB;MAExB,CAHW,EAIZ,EAJY,CAAb;MAOA,OAAO,KAAP;IACA,CAZM,CAAP;EAaA,CAzHD;;EA0HD,OAAA,kBAAA;AAAC,CAtLD,CAAwC,kBAAxC,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\nvar AWSAppSyncProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncProvider, _super);\n    function AWSAppSyncProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._topicClient = new Map();\n        _this._topicAlias = new Map();\n        return _this;\n    }\n    Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n        get: function () {\n            throw new Error('Not supported');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSAppSyncProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncProvider';\n    };\n    AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n        var _this = this;\n        var topicsForClient = Array.from(this._topicClient.entries())\n            .filter(function (_a) {\n            var c = _a[1];\n            return c.clientId === clientId;\n        })\n            .map(function (_a) {\n            var t = _a[0];\n            return t;\n        });\n        topicsForClient.forEach(function (t) { return _this._cleanUpForTopic(t); });\n    };\n    AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n        this._topicClient.delete(topic);\n        this._topicAlias.delete(topic);\n    };\n    AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n        var _this = this;\n        var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest(_a, [\"clientId\", \"errorCode\"]);\n        if (errorCode !== 0) {\n            var topicsForClient = Array.from(this._topicClient.entries())\n                .filter(function (_a) {\n                var c = _a[1];\n                return c.clientId === clientId;\n            })\n                .map(function (_a) {\n                var t = _a[0];\n                return t;\n            });\n            topicsForClient.forEach(function (topic) {\n                if (_this._topicObservers.has(topic)) {\n                    _this._topicObservers.get(topic).forEach(function (obs) {\n                        if (!obs.closed) {\n                            obs.error(args);\n                        }\n                    });\n                    _this._topicObservers.delete(topic);\n                }\n            });\n            this._cleanUp(clientId);\n        }\n    };\n    AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function () { return null; })];\n                    case 1:\n                        client = _a.sent();\n                        return [4 /*yield*/, _super.prototype.disconnect.call(this, clientId)];\n                    case 2:\n                        _a.sent();\n                        this._cleanUp(clientId);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var result = new Observable(function (observer) {\n            var targetTopics = [].concat(topics);\n            logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var _a, mqttConnections, newSubscriptions, newAliases, map;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // Add these topics to map\n                            targetTopics.forEach(function (t) {\n                                if (!_this._topicObservers.has(t)) {\n                                    _this._topicObservers.set(t, new Set());\n                                }\n                                _this._topicObservers.get(t).add(observer);\n                            });\n                            _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                            newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                                var alias = _a[0], v = _a[1];\n                                return [v.topic, alias];\n                            });\n                            // Merge new aliases with old ones\n                            this._topicAlias = new Map(__spreadArrays(Array.from(this._topicAlias.entries()), newAliases));\n                            map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                                var connectionInfoForTopic = mqttConnections.find(function (c) { return c.topics.indexOf(elem) > -1; });\n                                if (connectionInfoForTopic) {\n                                    var clientId = connectionInfoForTopic.client, url = connectionInfoForTopic.url;\n                                    if (!acc[clientId]) {\n                                        acc[clientId] = {\n                                            url: url,\n                                            topics: new Set(),\n                                        };\n                                    }\n                                    acc[clientId].topics.add(elem);\n                                }\n                                return acc;\n                            }, {}));\n                            // reconnect everything we have in the map\n                            return [4 /*yield*/, Promise.all(map.map(function (_a) {\n                                    var clientId = _a[0], _b = _a[1], url = _b.url, topics = _b.topics;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var client, err_1;\n                                        var _this = this;\n                                        return __generator(this, function (_c) {\n                                            switch (_c.label) {\n                                                case 0:\n                                                    client = null;\n                                                    _c.label = 1;\n                                                case 1:\n                                                    _c.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.connect(clientId, {\n                                                            clientId: clientId,\n                                                            url: url,\n                                                        })];\n                                                case 2:\n                                                    client = _c.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    err_1 = _c.sent();\n                                                    observer.error({ message: 'Failed to connect', error: err_1 });\n                                                    observer.complete();\n                                                    return [2 /*return*/, undefined];\n                                                case 4:\n                                                    // subscribe to all topics for this client\n                                                    // store topic-client mapping\n                                                    topics.forEach(function (topic) {\n                                                        if (client.isConnected()) {\n                                                            client.subscribe(topic);\n                                                            _this._topicClient.set(topic, client);\n                                                        }\n                                                    });\n                                                    return [2 /*return*/, client];\n                                            }\n                                        });\n                                    });\n                                }))];\n                        case 1:\n                            // reconnect everything we have in the map\n                            _b.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n                targetTopics.forEach(function (t) {\n                    var client = _this._topicClient.get(t);\n                    if (client && client.isConnected()) {\n                        client.unsubscribe(t);\n                        _this._topicClient.delete(t);\n                        if (!Array.from(_this._topicClient.values()).some(function (c) { return c === client; })) {\n                            _this.disconnect(client.clientId);\n                        }\n                    }\n                    _this._topicObservers.delete(t);\n                });\n            };\n        });\n        return Observable.from(result).map(function (value) {\n            var topic = _this.getTopicForValue(value);\n            var alias = _this._topicAlias.get(topic);\n            value.data = Object.entries(value.data).reduce(function (obj, _a) {\n                var origKey = _a[0], val = _a[1];\n                return ((obj[(alias || origKey)] = val), obj);\n            }, {});\n            return value;\n        });\n    };\n    return AWSAppSyncProvider;\n}(MqttOverWSProvider));\nexport { AWSAppSyncProvider };\n//# sourceMappingURL=AWSAppSyncProvider.js.map"]},"metadata":{},"sourceType":"module"}