{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || _typeof(rawVariableValues) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Cannot complete value of unexpected type \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at \") + \"runtime for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" \") + 'function or each possible type should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type \") + \"for \\\"\".concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && _typeof(value) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (_typeof(source) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","forEach","isCollection","GraphQLError","locatedError","inspect","invariant","isInvalid","isNullish","isPromise","memoize3","promiseForObject","promiseReduce","getOperationRootType","typeFromAST","Kind","getVariableValues","getArgumentValues","getDirectiveValues","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","assertValidSchema","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","executeImpl","schema","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","responsePathAsArray","path","flattened","curr","push","key","prev","reverse","addPath","rawVariableValues","hasMultipleAssumedOperations","fragments","Object","create","i","definitions","definition","kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","concat","coercedVariableValues","variableDefinitions","apply","coerced","defaultFieldResolver","type","fields","collectFields","selectionSet","undefined","result","executeFieldsSerially","executeFields","error","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","args","_contextValue","asErrorInstance","Error","completed","completeValue","handleFieldError","rawError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","completedItem","all","serialize","serializedResult","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","_i","property","getQueryType","getFields"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || _typeof(rawVariableValues) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Cannot complete value of unexpected type \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at \") + \"runtime for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" \") + 'function or each possible type should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type \") + \"for \\\"\".concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && _typeof(value) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (_typeof(source) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;EAAE,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;IAAEH,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;MAAE,OAAO,OAAOA,GAAd;IAAoB,CAAtD;EAAyD,CAApI,MAA0I;IAAED,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;IAA+H,CAAjK;EAAoK;;EAAC,OAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE/V;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,OAAT,EAAkBC,YAAlB,QAAsC,SAAtC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,oBAAT,QAAqC,mCAArC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,QAAyE,UAAzE;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,UAAvC,EAAmDC,UAAnD,EAA+DC,aAA/D,QAAoF,oBAApF;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,oBAA/C,QAA2E,uBAA3E;AACA,SAASC,uBAAT,EAAkCC,oBAAlC,QAA8D,oBAA9D;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAO,SAASC,OAAT,CAAiBC,YAAjB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,YAApD,EAAkEC,cAAlE,EAAkFC,aAAlF,EAAiGC,aAAjG,EAAgH;EACrH;EACA;EACA,OAAOC,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyBC,WAAW,CAACT,YAAY,CAACU,MAAd,EAAsBV,YAAY,CAACC,QAAnC,EAA6CD,YAAY,CAACE,SAA1D,EAAqEF,YAAY,CAACG,YAAlF,EAAgGH,YAAY,CAACI,cAA7G,EAA6HJ,YAAY,CAACK,aAA1I,EAAyJL,YAAY,CAACM,aAAtK,CAApC,GAA2NG,WAAW,CAACT,YAAD,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,YAApC,EAAkDC,cAAlD,EAAkEC,aAAlE,EAAiFC,aAAjF,CAA7O;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6BT,QAA7B,EAAuCC,SAAvC,EAAkDC,YAAlD,EAAgEC,cAAhE,EAAgFC,aAAhF,EAA+FC,aAA/F,EAA8G;EAC5G;EACAK,6BAA6B,CAACD,MAAD,EAAST,QAAT,EAAmBG,cAAnB,CAA7B,CAF4G,CAE3C;EACjE;;EAEA,IAAIQ,UAAU,GAAGC,qBAAqB,CAACH,MAAD,EAAST,QAAT,EAAmBC,SAAnB,EAA8BC,YAA9B,EAA4CC,cAA5C,EAA4DC,aAA5D,EAA2EC,aAA3E,CAAtC,CAL4G,CAKqB;;EAEjI,IAAIQ,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAJ,EAA+B;IAC7B,OAAO;MACLI,MAAM,EAAEJ;IADH,CAAP;EAGD,CAX2G,CAW1G;EACF;EACA;EACA;EACA;EACA;EACA;;;EAGA,IAAIK,IAAI,GAAGC,gBAAgB,CAACN,UAAD,EAAaA,UAAU,CAACO,SAAxB,EAAmCjB,SAAnC,CAA3B;EACA,OAAOkB,aAAa,CAACR,UAAD,EAAaK,IAAb,CAApB;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASG,aAAT,CAAuBR,UAAvB,EAAmCK,IAAnC,EAAyC;EACvC,IAAIvC,SAAS,CAACuC,IAAD,CAAb,EAAqB;IACnB,OAAOA,IAAI,CAACI,IAAL,CAAU,UAAUC,QAAV,EAAoB;MACnC,OAAOF,aAAa,CAACR,UAAD,EAAaU,QAAb,CAApB;IACD,CAFM,CAAP;EAGD;;EAED,OAAOV,UAAU,CAACI,MAAX,CAAkBR,MAAlB,KAA6B,CAA7B,GAAiC;IACtCS,IAAI,EAAEA;EADgC,CAAjC,GAEH;IACFD,MAAM,EAAEJ,UAAU,CAACI,MADjB;IAEFC,IAAI,EAAEA;EAFJ,CAFJ;AAMD;AACD;AACA;AACA;AACA;;;AAGA,OAAO,SAASM,mBAAT,CAA6BC,IAA7B,EAAmC;EACxC,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIC,IAAI,GAAGF,IAAX;;EAEA,OAAOE,IAAP,EAAa;IACXD,SAAS,CAACE,IAAV,CAAeD,IAAI,CAACE,GAApB;IACAF,IAAI,GAAGA,IAAI,CAACG,IAAZ;EACD;;EAED,OAAOJ,SAAS,CAACK,OAAV,EAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBF,IAAjB,EAAuBD,GAAvB,EAA4B;EACjC,OAAO;IACLC,IAAI,EAAEA,IADD;IAELD,GAAG,EAAEA;EAFA,CAAP;AAID;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASjB,6BAAT,CAAuCD,MAAvC,EAA+CT,QAA/C,EAAyD+B,iBAAzD,EAA4E;EACjF,CAAC/B,QAAD,GAAY1B,SAAS,CAAC,CAAD,EAAI,uBAAJ,CAArB,GAAoD,KAAK,CAAzD,CADiF,CACrB;;EAE5DuB,iBAAiB,CAACY,MAAD,CAAjB,CAHiF,CAGtD;;EAE3B,EAAE,CAACsB,iBAAD,IAAsBpE,OAAO,CAACoE,iBAAD,CAAP,KAA+B,QAAvD,IAAmEzD,SAAS,CAAC,CAAD,EAAI,sEAAsE,iEAAtE,GAA0I,eAA9I,CAA5E,GAA6O,KAAK,CAAlP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASsC,qBAAT,CAA+BH,MAA/B,EAAuCT,QAAvC,EAAiDC,SAAjD,EAA4DC,YAA5D,EAA0E6B,iBAA1E,EAA6F3B,aAA7F,EAA4GC,aAA5G,EAA2H;EAChI,IAAIU,MAAM,GAAG,EAAb;EACA,IAAIG,SAAJ;EACA,IAAIc,4BAA4B,GAAG,KAAnC;EACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,QAAQ,CAACqC,WAAT,CAAqB9B,MAAzC,EAAiD6B,CAAC,EAAlD,EAAsD;IACpD,IAAIE,UAAU,GAAGtC,QAAQ,CAACqC,WAAT,CAAqBD,CAArB,CAAjB;;IAEA,QAAQE,UAAU,CAACC,IAAnB;MACE,KAAKxD,IAAI,CAACyD,oBAAV;QACE,IAAI,CAACpC,aAAD,IAAkBc,SAAtB,EAAiC;UAC/Bc,4BAA4B,GAAG,IAA/B;QACD,CAFD,MAEO,IAAI,CAAC5B,aAAD,IAAkBkC,UAAU,CAACG,IAAX,IAAmBH,UAAU,CAACG,IAAX,CAAgBC,KAAhB,KAA0BtC,aAAnE,EAAkF;UACvFc,SAAS,GAAGoB,UAAZ;QACD;;QAED;;MAEF,KAAKvD,IAAI,CAAC4D,mBAAV;QACEV,SAAS,CAACK,UAAU,CAACG,IAAX,CAAgBC,KAAjB,CAAT,GAAmCJ,UAAnC;QACA;IAZJ;EAcD;;EAED,IAAI,CAACpB,SAAL,EAAgB;IACd,IAAId,aAAJ,EAAmB;MACjBW,MAAM,CAACW,IAAP,CAAY,IAAIvD,YAAJ,CAAiB,6BAA6ByE,MAA7B,CAAoCxC,aAApC,EAAmD,KAAnD,CAAjB,CAAZ;IACD,CAFD,MAEO;MACLW,MAAM,CAACW,IAAP,CAAY,IAAIvD,YAAJ,CAAiB,4BAAjB,CAAZ;IACD;EACF,CAND,MAMO,IAAI6D,4BAAJ,EAAkC;IACvCjB,MAAM,CAACW,IAAP,CAAY,IAAIvD,YAAJ,CAAiB,mDAAmD,sBAApE,CAAZ;EACD;;EAED,IAAIgC,cAAJ;;EAEA,IAAIe,SAAJ,EAAe;IACb,IAAI2B,qBAAqB,GAAG7D,iBAAiB,CAACyB,MAAD,EAASS,SAAS,CAAC4B,mBAAV,IAAiC,EAA1C,EAA8Cf,iBAAiB,IAAI,EAAnE,CAA7C;;IAEA,IAAIc,qBAAqB,CAAC9B,MAA1B,EAAkC;MAChCA,MAAM,CAACW,IAAP,CAAYqB,KAAZ,CAAkBhC,MAAlB,EAA0B8B,qBAAqB,CAAC9B,MAAhD;IACD,CAFD,MAEO;MACLZ,cAAc,GAAG0C,qBAAqB,CAACG,OAAvC;IACD;EACF;;EAED,IAAIjC,MAAM,CAACR,MAAP,KAAkB,CAAtB,EAAyB;IACvB,OAAOQ,MAAP;EACD;;EAED,CAACG,SAAD,GAAa5C,SAAS,CAAC,CAAD,EAAI,6BAAJ,CAAtB,GAA2D,KAAK,CAAhE;EACA,CAAC6B,cAAD,GAAkB7B,SAAS,CAAC,CAAD,EAAI,6BAAJ,CAA3B,GAAgE,KAAK,CAArE;EACA,OAAO;IACLmC,MAAM,EAAEA,MADH;IAELwB,SAAS,EAAEA,SAFN;IAGLhC,SAAS,EAAEA,SAHN;IAILC,YAAY,EAAEA,YAJT;IAKLgB,SAAS,EAAEA,SALN;IAMLf,cAAc,EAAEA,cANX;IAOLE,aAAa,EAAEA,aAAa,IAAI4C,oBAP3B;IAQLlC,MAAM,EAAEA;EARH,CAAP;AAUD;AACD;AACA;AACA;;AAEA,SAASE,gBAAT,CAA0BN,UAA1B,EAAsCO,SAAtC,EAAiDjB,SAAjD,EAA4D;EAC1D,IAAIiD,IAAI,GAAGrE,oBAAoB,CAAC8B,UAAU,CAACF,MAAZ,EAAoBS,SAApB,CAA/B;EACA,IAAIiC,MAAM,GAAGC,aAAa,CAACzC,UAAD,EAAauC,IAAb,EAAmBhC,SAAS,CAACmC,YAA7B,EAA2CnB,MAAM,CAACC,MAAP,CAAc,IAAd,CAA3C,EAAgED,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhE,CAA1B;EACA,IAAIZ,IAAI,GAAG+B,SAAX,CAH0D,CAGpC;EACtB;EACA;EACA;EACA;;EAEA,IAAI;IACF,IAAIC,MAAM,GAAGrC,SAAS,CAACA,SAAV,KAAwB,UAAxB,GAAqCsC,qBAAqB,CAAC7C,UAAD,EAAauC,IAAb,EAAmBjD,SAAnB,EAA8BsB,IAA9B,EAAoC4B,MAApC,CAA1D,GAAwGM,aAAa,CAAC9C,UAAD,EAAauC,IAAb,EAAmBjD,SAAnB,EAA8BsB,IAA9B,EAAoC4B,MAApC,CAAlI;;IAEA,IAAI1E,SAAS,CAAC8E,MAAD,CAAb,EAAuB;MACrB,OAAOA,MAAM,CAACnC,IAAP,CAAYkC,SAAZ,EAAuB,UAAUI,KAAV,EAAiB;QAC7C/C,UAAU,CAACI,MAAX,CAAkBW,IAAlB,CAAuBgC,KAAvB;QACA,OAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;MACD,CAHM,CAAP;IAID;;IAED,OAAOL,MAAP;EACD,CAXD,CAWE,OAAOG,KAAP,EAAc;IACd/C,UAAU,CAACI,MAAX,CAAkBW,IAAlB,CAAuBgC,KAAvB;IACA,OAAO,IAAP;EACD;AACF;AACD;AACA;AACA;AACA;;;AAGA,SAASF,qBAAT,CAA+B7C,UAA/B,EAA2CkD,UAA3C,EAAuDC,WAAvD,EAAoEvC,IAApE,EAA0E4B,MAA1E,EAAkF;EAChF,OAAOvE,aAAa,CAACsD,MAAM,CAAC6B,IAAP,CAAYZ,MAAZ,CAAD,EAAsB,UAAUa,OAAV,EAAmBC,YAAnB,EAAiC;IACzE,IAAIC,UAAU,GAAGf,MAAM,CAACc,YAAD,CAAvB;IACA,IAAIE,SAAS,GAAGrC,OAAO,CAACP,IAAD,EAAO0C,YAAP,CAAvB;IACA,IAAIV,MAAM,GAAGa,YAAY,CAACzD,UAAD,EAAakD,UAAb,EAAyBC,WAAzB,EAAsCI,UAAtC,EAAkDC,SAAlD,CAAzB;;IAEA,IAAIZ,MAAM,KAAKD,SAAf,EAA0B;MACxB,OAAOU,OAAP;IACD;;IAED,IAAIvF,SAAS,CAAC8E,MAAD,CAAb,EAAuB;MACrB,OAAOA,MAAM,CAACnC,IAAP,CAAY,UAAUiD,cAAV,EAA0B;QAC3CL,OAAO,CAACC,YAAD,CAAP,GAAwBI,cAAxB;QACA,OAAOL,OAAP;MACD,CAHM,CAAP;IAID;;IAEDA,OAAO,CAACC,YAAD,CAAP,GAAwBV,MAAxB;IACA,OAAOS,OAAP;EACD,CAlBmB,EAkBjB9B,MAAM,CAACC,MAAP,CAAc,IAAd,CAlBiB,CAApB;AAmBD;AACD;AACA;AACA;AACA;;;AAGA,SAASsB,aAAT,CAAuB9C,UAAvB,EAAmCkD,UAAnC,EAA+CC,WAA/C,EAA4DvC,IAA5D,EAAkE4B,MAAlE,EAA0E;EACxE,IAAIa,OAAO,GAAG9B,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;EACA,IAAImC,eAAe,GAAG,KAAtB;;EAEA,KAAK,IAAIlC,CAAC,GAAG,CAAR,EAAW2B,IAAI,GAAG7B,MAAM,CAAC6B,IAAP,CAAYZ,MAAZ,CAAvB,EAA4Cf,CAAC,GAAG2B,IAAI,CAACxD,MAArD,EAA6D,EAAE6B,CAA/D,EAAkE;IAChE,IAAI6B,YAAY,GAAGF,IAAI,CAAC3B,CAAD,CAAvB;IACA,IAAI8B,UAAU,GAAGf,MAAM,CAACc,YAAD,CAAvB;IACA,IAAIE,SAAS,GAAGrC,OAAO,CAACP,IAAD,EAAO0C,YAAP,CAAvB;IACA,IAAIV,MAAM,GAAGa,YAAY,CAACzD,UAAD,EAAakD,UAAb,EAAyBC,WAAzB,EAAsCI,UAAtC,EAAkDC,SAAlD,CAAzB;;IAEA,IAAIZ,MAAM,KAAKD,SAAf,EAA0B;MACxBU,OAAO,CAACC,YAAD,CAAP,GAAwBV,MAAxB;;MAEA,IAAI,CAACe,eAAD,IAAoB7F,SAAS,CAAC8E,MAAD,CAAjC,EAA2C;QACzCe,eAAe,GAAG,IAAlB;MACD;IACF;EACF,CAjBuE,CAiBtE;;;EAGF,IAAI,CAACA,eAAL,EAAsB;IACpB,OAAON,OAAP;EACD,CAtBuE,CAsBtE;EACF;EACA;;;EAGA,OAAOrF,gBAAgB,CAACqF,OAAD,CAAvB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASZ,aAAT,CAAuBzC,UAAvB,EAAmC4D,WAAnC,EAAgDlB,YAAhD,EAA8DF,MAA9D,EAAsEqB,oBAAtE,EAA4F;EACjG,KAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,YAAY,CAACoB,UAAb,CAAwBlE,MAA5C,EAAoD6B,CAAC,EAArD,EAAyD;IACvD,IAAIsC,SAAS,GAAGrB,YAAY,CAACoB,UAAb,CAAwBrC,CAAxB,CAAhB;;IAEA,QAAQsC,SAAS,CAACnC,IAAlB;MACE,KAAKxD,IAAI,CAAC4F,KAAV;QACE,IAAI,CAACC,iBAAiB,CAACjE,UAAD,EAAa+D,SAAb,CAAtB,EAA+C;UAC7C;QACD;;QAED,IAAIjC,IAAI,GAAGoC,gBAAgB,CAACH,SAAD,CAA3B;;QAEA,IAAI,CAACvB,MAAM,CAACV,IAAD,CAAX,EAAmB;UACjBU,MAAM,CAACV,IAAD,CAAN,GAAe,EAAf;QACD;;QAEDU,MAAM,CAACV,IAAD,CAAN,CAAaf,IAAb,CAAkBgD,SAAlB;QACA;;MAEF,KAAK3F,IAAI,CAAC+F,eAAV;QACE,IAAI,CAACF,iBAAiB,CAACjE,UAAD,EAAa+D,SAAb,CAAlB,IAA6C,CAACK,0BAA0B,CAACpE,UAAD,EAAa+D,SAAb,EAAwBH,WAAxB,CAA5E,EAAkH;UAChH;QACD;;QAEDnB,aAAa,CAACzC,UAAD,EAAa4D,WAAb,EAA0BG,SAAS,CAACrB,YAApC,EAAkDF,MAAlD,EAA0DqB,oBAA1D,CAAb;QACA;;MAEF,KAAKzF,IAAI,CAACiG,eAAV;QACE,IAAIC,QAAQ,GAAGP,SAAS,CAACjC,IAAV,CAAeC,KAA9B;;QAEA,IAAI8B,oBAAoB,CAACS,QAAD,CAApB,IAAkC,CAACL,iBAAiB,CAACjE,UAAD,EAAa+D,SAAb,CAAxD,EAAiF;UAC/E;QACD;;QAEDF,oBAAoB,CAACS,QAAD,CAApB,GAAiC,IAAjC;QACA,IAAIC,QAAQ,GAAGvE,UAAU,CAACsB,SAAX,CAAqBgD,QAArB,CAAf;;QAEA,IAAI,CAACC,QAAD,IAAa,CAACH,0BAA0B,CAACpE,UAAD,EAAauE,QAAb,EAAuBX,WAAvB,CAA5C,EAAiF;UAC/E;QACD;;QAEDnB,aAAa,CAACzC,UAAD,EAAa4D,WAAb,EAA0BW,QAAQ,CAAC7B,YAAnC,EAAiDF,MAAjD,EAAyDqB,oBAAzD,CAAb;QACA;IAtCJ;EAwCD;;EAED,OAAOrB,MAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,SAASyB,iBAAT,CAA2BjE,UAA3B,EAAuCwE,IAAvC,EAA6C;EAC3C,IAAIC,IAAI,GAAGlG,kBAAkB,CAACU,oBAAD,EAAuBuF,IAAvB,EAA6BxE,UAAU,CAACR,cAAxC,CAA7B;;EAEA,IAAIiF,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAY,IAAxB,EAA8B;IAC5B,OAAO,KAAP;EACD;;EAED,IAAIC,OAAO,GAAGpG,kBAAkB,CAACS,uBAAD,EAA0BwF,IAA1B,EAAgCxE,UAAU,CAACR,cAA3C,CAAhC;;EAEA,IAAImF,OAAO,IAAIA,OAAO,CAACD,EAAR,KAAe,KAA9B,EAAqC;IACnC,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD;AACD;AACA;AACA;;;AAGA,SAASN,0BAAT,CAAoCpE,UAApC,EAAgDuE,QAAhD,EAA0DhC,IAA1D,EAAgE;EAC9D,IAAIqC,iBAAiB,GAAGL,QAAQ,CAACM,aAAjC;;EAEA,IAAI,CAACD,iBAAL,EAAwB;IACtB,OAAO,IAAP;EACD;;EAED,IAAIE,eAAe,GAAG3G,WAAW,CAAC6B,UAAU,CAACF,MAAZ,EAAoB8E,iBAApB,CAAjC;;EAEA,IAAIE,eAAe,KAAKvC,IAAxB,EAA8B;IAC5B,OAAO,IAAP;EACD;;EAED,IAAI9D,cAAc,CAACqG,eAAD,CAAlB,EAAqC;IACnC,OAAO9E,UAAU,CAACF,MAAX,CAAkBiF,cAAlB,CAAiCD,eAAjC,EAAkDvC,IAAlD,CAAP;EACD;;EAED,OAAO,KAAP;AACD;AACD;AACA;AACA;;;AAGA,SAAS2B,gBAAT,CAA0BM,IAA1B,EAAgC;EAC9B,OAAOA,IAAI,CAACQ,KAAL,GAAaR,IAAI,CAACQ,KAAL,CAAWjD,KAAxB,GAAgCyC,IAAI,CAAC1C,IAAL,CAAUC,KAAjD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS0B,YAAT,CAAsBzD,UAAtB,EAAkCkD,UAAlC,EAA8C+B,MAA9C,EAAsD1B,UAAtD,EAAkE3C,IAAlE,EAAwE;EACtE,IAAIsE,SAAS,GAAG3B,UAAU,CAAC,CAAD,CAA1B;EACA,IAAI4B,SAAS,GAAGD,SAAS,CAACpD,IAAV,CAAeC,KAA/B;EACA,IAAIqD,QAAQ,GAAGC,WAAW,CAACrF,UAAU,CAACF,MAAZ,EAAoBoD,UAApB,EAAgCiC,SAAhC,CAA1B;;EAEA,IAAI,CAACC,QAAL,EAAe;IACb;EACD;;EAED,IAAIE,SAAS,GAAGF,QAAQ,CAACnC,OAAT,IAAoBjD,UAAU,CAACN,aAA/C;EACA,IAAI6F,IAAI,GAAGC,gBAAgB,CAACxF,UAAD,EAAaoF,QAAb,EAAuB7B,UAAvB,EAAmCL,UAAnC,EAA+CtC,IAA/C,CAA3B,CAVsE,CAUW;EACjF;;EAEA,IAAIgC,MAAM,GAAG6C,wBAAwB,CAACzF,UAAD,EAAaoF,QAAb,EAAuB7B,UAAvB,EAAmC+B,SAAnC,EAA8CL,MAA9C,EAAsDM,IAAtD,CAArC;EACA,OAAOG,0BAA0B,CAAC1F,UAAD,EAAaoF,QAAQ,CAAC7C,IAAtB,EAA4BgB,UAA5B,EAAwCgC,IAAxC,EAA8C3E,IAA9C,EAAoDgC,MAApD,CAAjC;AACD;;AAED,OAAO,SAAS4C,gBAAT,CAA0BxF,UAA1B,EAAsCoF,QAAtC,EAAgD7B,UAAhD,EAA4DL,UAA5D,EAAwEtC,IAAxE,EAA8E;EACnF;EACA;EACA,OAAO;IACLuE,SAAS,EAAEC,QAAQ,CAACtD,IADf;IAELyB,UAAU,EAAEA,UAFP;IAGLoC,UAAU,EAAEP,QAAQ,CAAC7C,IAHhB;IAILW,UAAU,EAAEA,UAJP;IAKLtC,IAAI,EAAEA,IALD;IAMLd,MAAM,EAAEE,UAAU,CAACF,MANd;IAOLwB,SAAS,EAAEtB,UAAU,CAACsB,SAPjB;IAQLhC,SAAS,EAAEU,UAAU,CAACV,SARjB;IASLiB,SAAS,EAAEP,UAAU,CAACO,SATjB;IAULf,cAAc,EAAEQ,UAAU,CAACR;EAVtB,CAAP;AAYD,C,CAAC;AACF;;AAEA,OAAO,SAASiG,wBAAT,CAAkCzF,UAAlC,EAA8CoF,QAA9C,EAAwD7B,UAAxD,EAAoE+B,SAApE,EAA+EL,MAA/E,EAAuFM,IAAvF,EAA6F;EAClG,IAAI;IACF;IACA;IACA;IACA,IAAIK,IAAI,GAAGtH,iBAAiB,CAAC8G,QAAD,EAAW7B,UAAU,CAAC,CAAD,CAArB,EAA0BvD,UAAU,CAACR,cAArC,CAA5B,CAJE,CAIgF;IAClF;IACA;;IAEA,IAAIqG,aAAa,GAAG7F,UAAU,CAACT,YAA/B;IACA,IAAIqD,MAAM,GAAG0C,SAAS,CAACL,MAAD,EAASW,IAAT,EAAeC,aAAf,EAA8BN,IAA9B,CAAtB;IACA,OAAOzH,SAAS,CAAC8E,MAAD,CAAT,GAAoBA,MAAM,CAACnC,IAAP,CAAYkC,SAAZ,EAAuBmD,eAAvB,CAApB,GAA8DlD,MAArE;EACD,CAXD,CAWE,OAAOG,KAAP,EAAc;IACd,OAAO+C,eAAe,CAAC/C,KAAD,CAAtB;EACD;AACF,C,CAAC;AACF;;AAEA,SAAS+C,eAAT,CAAyB/C,KAAzB,EAAgC;EAC9B,OAAOA,KAAK,YAAYgD,KAAjB,GAAyBhD,KAAzB,GAAiC,IAAIgD,KAAJ,CAAUhD,KAAK,IAAIJ,SAAnB,CAAxC;AACD,C,CAAC;AACF;;;AAGA,SAAS+C,0BAAT,CAAoC1F,UAApC,EAAgD2F,UAAhD,EAA4DpC,UAA5D,EAAwEgC,IAAxE,EAA8E3E,IAA9E,EAAoFgC,MAApF,EAA4F;EAC1F,IAAI;IACF,IAAIoD,SAAJ;;IAEA,IAAIlI,SAAS,CAAC8E,MAAD,CAAb,EAAuB;MACrBoD,SAAS,GAAGpD,MAAM,CAACnC,IAAP,CAAY,UAAUC,QAAV,EAAoB;QAC1C,OAAOuF,aAAa,CAACjG,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqCgC,IAArC,EAA2C3E,IAA3C,EAAiDF,QAAjD,CAApB;MACD,CAFW,CAAZ;IAGD,CAJD,MAIO;MACLsF,SAAS,GAAGC,aAAa,CAACjG,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqCgC,IAArC,EAA2C3E,IAA3C,EAAiDgC,MAAjD,CAAzB;IACD;;IAED,IAAI9E,SAAS,CAACkI,SAAD,CAAb,EAA0B;MACxB;MACA;MACA,OAAOA,SAAS,CAACvF,IAAV,CAAekC,SAAf,EAA0B,UAAUI,KAAV,EAAiB;QAChD,OAAOmD,gBAAgB,CAACnD,KAAD,EAAQQ,UAAR,EAAoB3C,IAApB,EAA0B+E,UAA1B,EAAsC3F,UAAtC,CAAvB;MACD,CAFM,CAAP;IAGD;;IAED,OAAOgG,SAAP;EACD,CApBD,CAoBE,OAAOjD,KAAP,EAAc;IACd,OAAOmD,gBAAgB,CAACnD,KAAD,EAAQQ,UAAR,EAAoB3C,IAApB,EAA0B+E,UAA1B,EAAsC3F,UAAtC,CAAvB;EACD;AACF;;AAED,SAASkG,gBAAT,CAA0BC,QAA1B,EAAoC5C,UAApC,EAAgD3C,IAAhD,EAAsD+E,UAAtD,EAAkE3F,UAAlE,EAA8E;EAC5E,IAAI+C,KAAK,GAAGtF,YAAY,CAACqI,eAAe,CAACK,QAAD,CAAhB,EAA4B5C,UAA5B,EAAwC5C,mBAAmB,CAACC,IAAD,CAA3D,CAAxB,CAD4E,CACgB;EAC5F;;EAEA,IAAIhC,aAAa,CAAC+G,UAAD,CAAjB,EAA+B;IAC7B,MAAM5C,KAAN;EACD,CAN2E,CAM1E;EACF;;;EAGA/C,UAAU,CAACI,MAAX,CAAkBW,IAAlB,CAAuBgC,KAAvB;EACA,OAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASkD,aAAT,CAAuBjG,UAAvB,EAAmC2F,UAAnC,EAA+CpC,UAA/C,EAA2DgC,IAA3D,EAAiE3E,IAAjE,EAAuEgC,MAAvE,EAA+E;EAC7E;EACA,IAAIA,MAAM,YAAYmD,KAAtB,EAA6B;IAC3B,MAAMnD,MAAN;EACD,CAJ4E,CAI3E;EACF;;;EAGA,IAAIhE,aAAa,CAAC+G,UAAD,CAAjB,EAA+B;IAC7B,IAAIK,SAAS,GAAGC,aAAa,CAACjG,UAAD,EAAa2F,UAAU,CAACS,MAAxB,EAAgC7C,UAAhC,EAA4CgC,IAA5C,EAAkD3E,IAAlD,EAAwDgC,MAAxD,CAA7B;;IAEA,IAAIoD,SAAS,KAAK,IAAlB,EAAwB;MACtB,MAAM,IAAID,KAAJ,CAAU,6CAA6C9D,MAA7C,CAAoDsD,IAAI,CAACrC,UAAL,CAAgBpB,IAApE,EAA0E,GAA1E,EAA+EG,MAA/E,CAAsFsD,IAAI,CAACJ,SAA3F,EAAsG,GAAtG,CAAV,CAAN;IACD;;IAED,OAAOa,SAAP;EACD,CAhB4E,CAgB3E;;;EAGF,IAAInI,SAAS,CAAC+E,MAAD,CAAb,EAAuB;IACrB,OAAO,IAAP;EACD,CArB4E,CAqB3E;;;EAGF,IAAIjE,UAAU,CAACgH,UAAD,CAAd,EAA4B;IAC1B,OAAOU,iBAAiB,CAACrG,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqCgC,IAArC,EAA2C3E,IAA3C,EAAiDgC,MAAjD,CAAxB;EACD,CA1B4E,CA0B3E;EACF;;;EAGA,IAAIlE,UAAU,CAACiH,UAAD,CAAd,EAA4B;IAC1B,OAAOW,iBAAiB,CAACX,UAAD,EAAa/C,MAAb,CAAxB;EACD,CAhC4E,CAgC3E;EACF;;;EAGA,IAAInE,cAAc,CAACkH,UAAD,CAAlB,EAAgC;IAC9B,OAAOY,qBAAqB,CAACvG,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqCgC,IAArC,EAA2C3E,IAA3C,EAAiDgC,MAAjD,CAA5B;EACD,CAtC4E,CAsC3E;;;EAGF,IAAIpE,YAAY,CAACmH,UAAD,CAAhB,EAA8B;IAC5B,OAAOa,mBAAmB,CAACxG,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqCgC,IAArC,EAA2C3E,IAA3C,EAAiDgC,MAAjD,CAA1B;EACD,CA3C4E,CA2C3E;;EAEF;;;EAGA,MAAM,IAAImD,KAAJ,CAAU,8CAA8C9D,MAA9C,CAAqDvE,OAAO,CAACiI,UAAD,CAA5D,EAA0E,KAA1E,CAAV,CAAN;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASU,iBAAT,CAA2BrG,UAA3B,EAAuC2F,UAAvC,EAAmDpC,UAAnD,EAA+DgC,IAA/D,EAAqE3E,IAArE,EAA2EgC,MAA3E,EAAmF;EACjF,CAACrF,YAAY,CAACqF,MAAD,CAAb,GAAwBjF,SAAS,CAAC,CAAD,EAAI,qDAAqDsE,MAArD,CAA4DsD,IAAI,CAACrC,UAAL,CAAgBpB,IAA5E,EAAkF,GAAlF,EAAuFG,MAAvF,CAA8FsD,IAAI,CAACJ,SAAnG,EAA8G,GAA9G,CAAJ,CAAjC,GAA2J,KAAK,CAAhK,CADiF,CACkF;EACnK;;EAEA,IAAIsB,QAAQ,GAAGd,UAAU,CAACS,MAA1B;EACA,IAAIzC,eAAe,GAAG,KAAtB;EACA,IAAI+C,gBAAgB,GAAG,EAAvB;EACApJ,OAAO,CAACsF,MAAD,EAAS,UAAU+D,IAAV,EAAgBC,KAAhB,EAAuB;IACrC;IACA;IACA,IAAIpD,SAAS,GAAGrC,OAAO,CAACP,IAAD,EAAOgG,KAAP,CAAvB;IACA,IAAIC,aAAa,GAAGnB,0BAA0B,CAAC1F,UAAD,EAAayG,QAAb,EAAuBlD,UAAvB,EAAmCgC,IAAnC,EAAyC/B,SAAzC,EAAoDmD,IAApD,CAA9C;;IAEA,IAAI,CAAChD,eAAD,IAAoB7F,SAAS,CAAC+I,aAAD,CAAjC,EAAkD;MAChDlD,eAAe,GAAG,IAAlB;IACD;;IAED+C,gBAAgB,CAAC3F,IAAjB,CAAsB8F,aAAtB;EACD,CAXM,CAAP;EAYA,OAAOlD,eAAe,GAAGX,OAAO,CAAC8D,GAAR,CAAYJ,gBAAZ,CAAH,GAAmCA,gBAAzD;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASJ,iBAAT,CAA2BX,UAA3B,EAAuC/C,MAAvC,EAA+C;EAC7C,CAAC+C,UAAU,CAACoB,SAAZ,GAAwBpJ,SAAS,CAAC,CAAD,EAAI,kCAAJ,CAAjC,GAA2E,KAAK,CAAhF;EACA,IAAIqJ,gBAAgB,GAAGrB,UAAU,CAACoB,SAAX,CAAqBnE,MAArB,CAAvB;;EAEA,IAAIhF,SAAS,CAACoJ,gBAAD,CAAb,EAAiC;IAC/B,MAAM,IAAIjB,KAAJ,CAAU,8BAA8B9D,MAA9B,CAAqCvE,OAAO,CAACiI,UAAD,CAA5C,EAA0D,SAA1D,IAAuE,aAAa1D,MAAb,CAAoBvE,OAAO,CAACkF,MAAD,CAA3B,CAAjF,CAAN;EACD;;EAED,OAAOoE,gBAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAAST,qBAAT,CAA+BvG,UAA/B,EAA2C2F,UAA3C,EAAuDpC,UAAvD,EAAmEgC,IAAnE,EAAyE3E,IAAzE,EAA+EgC,MAA/E,EAAuF;EACrF,IAAIgB,WAAW,GAAG+B,UAAU,CAACsB,WAAX,GAAyBtB,UAAU,CAACsB,WAAX,CAAuBrE,MAAvB,EAA+B5C,UAAU,CAACT,YAA1C,EAAwDgG,IAAxD,CAAzB,GAAyF2B,oBAAoB,CAACtE,MAAD,EAAS5C,UAAU,CAACT,YAApB,EAAkCgG,IAAlC,EAAwCI,UAAxC,CAA/H;;EAEA,IAAI7H,SAAS,CAAC8F,WAAD,CAAb,EAA4B;IAC1B,OAAOA,WAAW,CAACnD,IAAZ,CAAiB,UAAU0G,mBAAV,EAA+B;MACrD,OAAOX,mBAAmB,CAACxG,UAAD,EAAaoH,sBAAsB,CAACD,mBAAD,EAAsBnH,UAAtB,EAAkC2F,UAAlC,EAA8CpC,UAA9C,EAA0DgC,IAA1D,EAAgE3C,MAAhE,CAAnC,EAA4GW,UAA5G,EAAwHgC,IAAxH,EAA8H3E,IAA9H,EAAoIgC,MAApI,CAA1B;IACD,CAFM,CAAP;EAGD;;EAED,OAAO4D,mBAAmB,CAACxG,UAAD,EAAaoH,sBAAsB,CAACxD,WAAD,EAAc5D,UAAd,EAA0B2F,UAA1B,EAAsCpC,UAAtC,EAAkDgC,IAAlD,EAAwD3C,MAAxD,CAAnC,EAAoGW,UAApG,EAAgHgC,IAAhH,EAAsH3E,IAAtH,EAA4HgC,MAA5H,CAA1B;AACD;;AAED,SAASwE,sBAAT,CAAgCC,iBAAhC,EAAmDrH,UAAnD,EAA+D2F,UAA/D,EAA2EpC,UAA3E,EAAuFgC,IAAvF,EAA6F3C,MAA7F,EAAqG;EACnG,IAAIgB,WAAW,GAAG,OAAOyD,iBAAP,KAA6B,QAA7B,GAAwCrH,UAAU,CAACF,MAAX,CAAkBwH,OAAlB,CAA0BD,iBAA1B,CAAxC,GAAuFA,iBAAzG;;EAEA,IAAI,CAAC7I,YAAY,CAACoF,WAAD,CAAjB,EAAgC;IAC9B,MAAM,IAAIpG,YAAJ,CAAiB,iBAAiByE,MAAjB,CAAwB0D,UAAU,CAAC7D,IAAnC,EAAyC,qCAAzC,IAAkF,qBAAqBG,MAArB,CAA4BsD,IAAI,CAACrC,UAAL,CAAgBpB,IAA5C,EAAkD,GAAlD,EAAuDG,MAAvD,CAA8DsD,IAAI,CAACJ,SAAnE,EAA8E,QAA9E,CAAlF,GAA4K,SAASlD,MAAT,CAAgBvE,OAAO,CAACkF,MAAD,CAAvB,EAAiC,eAAjC,EAAkDX,MAAlD,CAAyDvE,OAAO,CAACkG,WAAD,CAAhE,EAA+E,MAA/E,CAA5K,GAAqQ,cAAc3B,MAAd,CAAqB0D,UAAU,CAAC7D,IAAhC,EAAsC,yCAAtC,CAArQ,GAAwV,mDAAxV,GAA8Y,sBAA/Z,EAAubyB,UAAvb,CAAN;EACD;;EAED,IAAI,CAACvD,UAAU,CAACF,MAAX,CAAkBiF,cAAlB,CAAiCY,UAAjC,EAA6C/B,WAA7C,CAAL,EAAgE;IAC9D,MAAM,IAAIpG,YAAJ,CAAiB,yBAAyByE,MAAzB,CAAgC2B,WAAW,CAAC9B,IAA5C,EAAkD,4BAAlD,IAAkF,SAASG,MAAT,CAAgB0D,UAAU,CAAC7D,IAA3B,EAAiC,KAAjC,CAAnG,EAA4IyB,UAA5I,CAAN;EACD;;EAED,OAAOK,WAAP;AACD;AACD;AACA;AACA;;;AAGA,SAAS4C,mBAAT,CAA6BxG,UAA7B,EAAyC2F,UAAzC,EAAqDpC,UAArD,EAAiEgC,IAAjE,EAAuE3E,IAAvE,EAA6EgC,MAA7E,EAAqF;EACnF;EACA;EACA;EACA,IAAI+C,UAAU,CAAC4B,QAAf,EAAyB;IACvB,IAAIA,QAAQ,GAAG5B,UAAU,CAAC4B,QAAX,CAAoB3E,MAApB,EAA4B5C,UAAU,CAACT,YAAvC,EAAqDgG,IAArD,CAAf;;IAEA,IAAIzH,SAAS,CAACyJ,QAAD,CAAb,EAAyB;MACvB,OAAOA,QAAQ,CAAC9G,IAAT,CAAc,UAAU+G,gBAAV,EAA4B;QAC/C,IAAI,CAACA,gBAAL,EAAuB;UACrB,MAAMC,sBAAsB,CAAC9B,UAAD,EAAa/C,MAAb,EAAqBW,UAArB,CAA5B;QACD;;QAED,OAAOmE,0BAA0B,CAAC1H,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqC3C,IAArC,EAA2CgC,MAA3C,CAAjC;MACD,CANM,CAAP;IAOD;;IAED,IAAI,CAAC2E,QAAL,EAAe;MACb,MAAME,sBAAsB,CAAC9B,UAAD,EAAa/C,MAAb,EAAqBW,UAArB,CAA5B;IACD;EACF;;EAED,OAAOmE,0BAA0B,CAAC1H,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,EAAqC3C,IAArC,EAA2CgC,MAA3C,CAAjC;AACD;;AAED,SAAS6E,sBAAT,CAAgC9B,UAAhC,EAA4C/C,MAA5C,EAAoDW,UAApD,EAAgE;EAC9D,OAAO,IAAI/F,YAAJ,CAAiB,4BAA4ByE,MAA5B,CAAmC0D,UAAU,CAAC7D,IAA9C,EAAoD,cAApD,EAAoEG,MAApE,CAA2EvE,OAAO,CAACkF,MAAD,CAAlF,EAA4F,GAA5F,CAAjB,EAAmHW,UAAnH,CAAP;AACD;;AAED,SAASmE,0BAAT,CAAoC1H,UAApC,EAAgD2F,UAAhD,EAA4DpC,UAA5D,EAAwE3C,IAAxE,EAA8EgC,MAA9E,EAAsF;EACpF;EACA,IAAI+E,aAAa,GAAGC,gBAAgB,CAAC5H,UAAD,EAAa2F,UAAb,EAAyBpC,UAAzB,CAApC;EACA,OAAOT,aAAa,CAAC9C,UAAD,EAAa2F,UAAb,EAAyB/C,MAAzB,EAAiChC,IAAjC,EAAuC+G,aAAvC,CAApB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,gBAAgB,GAAG7J,QAAQ,CAAC8J,iBAAD,CAA/B;;AAEA,SAASA,iBAAT,CAA2B7H,UAA3B,EAAuC2F,UAAvC,EAAmDpC,UAAnD,EAA+D;EAC7D,IAAIoE,aAAa,GAAGpG,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB;EACA,IAAIqC,oBAAoB,GAAGtC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA3B;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,UAAU,CAAC3D,MAA/B,EAAuC6B,CAAC,EAAxC,EAA4C;IAC1C,IAAIiB,YAAY,GAAGa,UAAU,CAAC9B,CAAD,CAAV,CAAciB,YAAjC;;IAEA,IAAIA,YAAJ,EAAkB;MAChBiF,aAAa,GAAGlF,aAAa,CAACzC,UAAD,EAAa2F,UAAb,EAAyBjD,YAAzB,EAAuCiF,aAAvC,EAAsD9D,oBAAtD,CAA7B;IACD;EACF;;EAED,OAAO8D,aAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAST,oBAAT,CAA8BnF,KAA9B,EAAqCxC,YAArC,EAAmDgG,IAAnD,EAAyDuC,YAAzD,EAAuE;EACrE;EACA,IAAI/F,KAAK,KAAK,IAAV,IAAkB/E,OAAO,CAAC+E,KAAD,CAAP,KAAmB,QAArC,IAAiD,OAAOA,KAAK,CAACgG,UAAb,KAA4B,QAAjF,EAA2F;IACzF,OAAOhG,KAAK,CAACgG,UAAb;EACD,CAJoE,CAInE;;;EAGF,IAAIC,aAAa,GAAGzC,IAAI,CAACzF,MAAL,CAAYmI,gBAAZ,CAA6BH,YAA7B,CAApB;EACA,IAAII,uBAAuB,GAAG,EAA9B;;EAEA,KAAK,IAAIzG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuG,aAAa,CAACpI,MAAlC,EAA0C6B,CAAC,EAA3C,EAA+C;IAC7C,IAAIc,IAAI,GAAGyF,aAAa,CAACvG,CAAD,CAAxB;;IAEA,IAAIc,IAAI,CAACgF,QAAT,EAAmB;MACjB,IAAIY,cAAc,GAAG5F,IAAI,CAACgF,QAAL,CAAcxF,KAAd,EAAqBxC,YAArB,EAAmCgG,IAAnC,CAArB;;MAEA,IAAIzH,SAAS,CAACqK,cAAD,CAAb,EAA+B;QAC7BD,uBAAuB,CAACzG,CAAD,CAAvB,GAA6B0G,cAA7B;MACD,CAFD,MAEO,IAAIA,cAAJ,EAAoB;QACzB,OAAO5F,IAAP;MACD;IACF;EACF;;EAED,IAAI2F,uBAAuB,CAACtI,MAA5B,EAAoC;IAClC,OAAOoD,OAAO,CAAC8D,GAAR,CAAYoB,uBAAZ,EAAqCzH,IAArC,CAA0C,UAAU2H,eAAV,EAA2B;MAC1E,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,eAAe,CAACxI,MAAtC,EAA8CyI,EAAE,EAAhD,EAAoD;QAClD,IAAID,eAAe,CAACC,EAAD,CAAnB,EAAyB;UACvB,OAAOL,aAAa,CAACK,EAAD,CAApB;QACD;MACF;IACF,CANM,CAAP;EAOD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,IAAI/F,oBAAoB,GAAG,SAASA,oBAAT,CAA8B2C,MAA9B,EAAsCW,IAAtC,EAA4CrG,YAA5C,EAA0DgG,IAA1D,EAAgE;EAChG;EACA,IAAIvI,OAAO,CAACiI,MAAD,CAAP,KAAoB,QAApB,IAAgC,OAAOA,MAAP,KAAkB,UAAtD,EAAkE;IAChE,IAAIqD,QAAQ,GAAGrD,MAAM,CAACM,IAAI,CAACJ,SAAN,CAArB;;IAEA,IAAI,OAAOmD,QAAP,KAAoB,UAAxB,EAAoC;MAClC,OAAOrD,MAAM,CAACM,IAAI,CAACJ,SAAN,CAAN,CAAuBS,IAAvB,EAA6BrG,YAA7B,EAA2CgG,IAA3C,CAAP;IACD;;IAED,OAAO+C,QAAP;EACD;AACF,CAXM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASjD,WAAT,CAAqBvF,MAArB,EAA6BoD,UAA7B,EAAyCiC,SAAzC,EAAoD;EACzD,IAAIA,SAAS,KAAKtG,kBAAkB,CAACiD,IAAjC,IAAyChC,MAAM,CAACyI,YAAP,OAA0BrF,UAAvE,EAAmF;IACjF,OAAOrE,kBAAP;EACD,CAFD,MAEO,IAAIsG,SAAS,KAAKrG,gBAAgB,CAACgD,IAA/B,IAAuChC,MAAM,CAACyI,YAAP,OAA0BrF,UAArE,EAAiF;IACtF,OAAOpE,gBAAP;EACD,CAFM,MAEA,IAAIqG,SAAS,KAAKpG,oBAAoB,CAAC+C,IAAvC,EAA6C;IAClD,OAAO/C,oBAAP;EACD;;EAED,OAAOmE,UAAU,CAACsF,SAAX,GAAuBrD,SAAvB,CAAP;AACD"},"metadata":{},"sourceType":"module"}