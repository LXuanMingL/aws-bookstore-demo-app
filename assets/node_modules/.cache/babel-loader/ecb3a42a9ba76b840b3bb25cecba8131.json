{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger, ClientDevice, Platform, Credentials, Signer, JS, Hub } from '@aws-amplify/core';\nimport * as MobileAnalytics from 'aws-sdk/clients/mobileanalytics';\nimport * as Pinpoint from 'aws-sdk/clients/pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAnalyticsEvent = function dispatchAnalyticsEvent(event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar BEACON_SUPPORTED = navigator && typeof navigator.sendBeacon === 'function'; // events buffer\n\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar RESEND_LIMIT = 5; // params: { event: {name: , .... }, timeStamp, config, resendLimit }\n\nvar AWSPinpointProvider =\n/** @class */\nfunction () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n\n  AWSPinpointProvider.prototype._setupTimer = function () {\n    var _this = this;\n\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var _a = this._config,\n        flushSize = _a.flushSize,\n        flushInterval = _a.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n\n      for (var i = 0; i < size; i += 1) {\n        var _a = _this._buffer.shift(),\n            params = _a.params,\n            handlers = _a.handlers;\n\n        that._send(params, handlers); // If this is the first request sent by Analytics module, we should stop sending remaining requests\n        // to prevent race condition of updating one endpoint when it's being created in the backend\n\n\n        if (_this._endpointGenerating) break;\n      }\n    }, flushInterval);\n  };\n  /**\n   * @private\n   * @param params - params for the event recording\n   * Put events into buffer\n   */\n\n\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    var bufferSize = this._config.bufferSize;\n\n    if (this._buffer.length < bufferSize) {\n      this._buffer.push({\n        params: params,\n        handlers: handlers\n      });\n    } else {\n      logger.debug('exceed analytics events buffer size');\n      return handlers.reject(new Error('Exceed the size of analytics events buffer'));\n    }\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (this._config['appId'] && !this._config['disabled']) {\n      if (!this._config['endpointId']) {\n        var cacheKey = this.getProviderName() + '_' + this._config['appId'];\n\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config['endpointId'] = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (e) {\n          logger.debug('Failed to generate endpointId', e);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n\n      this._setupTimer();\n    } else {\n      if (this._timer) {\n        clearInterval(this._timer);\n      }\n    }\n\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials || !this._config['appId'] || !this._config['region']) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2\n              /*return*/\n              , handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n\n            timestamp = new Date().getTime(); // attach the session and eventId\n\n            this._generateSession(params);\n\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config,\n              credentials: credentials\n            });\n\n            if (params.event.immediate) {\n              return [2\n              /*return*/\n              , this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n\n    switch (event.name) {\n      case '_session.start':\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n\n      case '_session.stop':\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n    }\n  };\n\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, config;\n      return __generator(this, function (_a) {\n        event = params.event, config = params.config;\n\n        switch (event.name) {\n          case '_update_endpoint':\n            return [2\n            /*return*/\n            , this._updateEndpoint(params, handlers)];\n\n          case '_session.stop':\n            return [2\n            /*return*/\n            , this._pinpointSendStopSession(params, handlers)];\n\n          default:\n            return [2\n            /*return*/\n            , this._record(params, handlers)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config,\n        credentials = params.credentials;\n    var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n    var appId = config.appId,\n        endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    eventParams.EventsRequest.BatchItem[endpointId] = {};\n    var endpointObj = eventParams.EventsRequest.BatchItem[endpointId];\n    endpointObj['Endpoint'] = endpointContext;\n    endpointObj['Events'] = {};\n    endpointObj['Events'][eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    };\n    return eventParams;\n  };\n\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, request;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        eventId = params.event.eventId, endpointId = params.config.endpointId;\n        eventParams = this._generateBatchItemContext(params);\n        request = this.pinpointClient.putEvents(eventParams); // in order to keep backward compatiblity\n        // we are using a legacy api: /apps/{appid}/events/legacy\n        // so that users don't need to update their IAM Policy\n        // will use the formal one in the next break release\n\n        request.on('build', function () {\n          request.httpRequest.path = request.httpRequest.path + '/legacy';\n        });\n        request.send(function (err, data) {\n          if (err) {\n            logger.error('record event failed. ', err);\n            logger.warn('If you have not updated your Pinpoint IAM Policy' + ' with the Action: \"mobiletargeting:PutEvents\" yet, please do it.' + ' This action is not necessary for now' + ' but in order to avoid breaking changes in the future,' + ' please update it as soon as possible.');\n            return handlers.reject(err);\n          } else {\n            var _a = endpointId,\n                _b = eventId,\n                _c = data.EventsResponse.Results[_a].EventsItemResponse[_b],\n                StatusCode = _c.StatusCode,\n                Message = _c.Message;\n\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              _this._endpointGenerating = false;\n              logger.debug('record event success. ', data);\n              return handlers.resolve(data);\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                _this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return handlers.reject(data);\n              }\n            }\n          }\n        });\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._record(params, handlers);\n\n      return;\n    }\n\n    var eventParams = this._generateBatchItemContext(params);\n\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n        EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n\n    return handlers.reject('sendBeacon failure');\n  };\n\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit; // For backward compatibility\n\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n\n      this._putToBuffer(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n\n  AWSPinpointProvider.prototype._record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, timestamp, config, credentials;\n      return __generator(this, function (_a) {\n        event = params.event, timestamp = params.timestamp, config = params.config, credentials = params.credentials;\n\n        this._initClients(config, credentials);\n\n        return [2\n        /*return*/\n        , this._pinpointPutEvents(params, handlers)];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._updateEndpoint = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var timestamp, config, credentials, event, appId, region, endpointId, request, update_params, that;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        timestamp = params.timestamp, config = params.config, credentials = params.credentials, event = params.event;\n        appId = config.appId, region = config.region, endpointId = config.endpointId;\n\n        this._initClients(config, credentials);\n\n        request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n        update_params = {\n          ApplicationId: appId,\n          EndpointId: endpointId,\n          EndpointRequest: request\n        };\n        that = this;\n        logger.debug('updateEndpoint with params: ', update_params);\n        that.pinpointClient.updateEndpoint(update_params, function (err, data) {\n          if (err) {\n            logger.debug('updateEndpoint failed', err);\n\n            if (err.message.startsWith('Exceeded maximum endpoint per user count')) {\n              _this._removeUnusedEndpoints(appId, request.User.UserId).then(function () {\n                logger.debug('Remove the unused endpoints successfully');\n\n                _this._retry(params, handlers);\n              }).catch(function (e) {\n                logger.warn(\"Failed to remove unused endpoints with error: \" + e);\n                logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:GetUserEndpoints\\\" \" + \"in order to get endpoints info of the user\");\n                return handlers.reject(err);\n              });\n            } else return handlers.reject(err);\n          } else {\n            logger.debug('updateEndpoint success', data);\n            _this._endpointGenerating = false;\n            return handlers.resolve(data);\n          }\n        });\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._removeUnusedEndpoints = function (appId, userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (res, rej) {\n          _this.pinpointClient.getUserEndpoints({\n            ApplicationId: appId,\n            UserId: userId\n          }, function (err, data) {\n            if (err) {\n              logger.debug(\"Failed to get endpoints associated with the userId: \" + userId + \" with error\", err);\n              return rej(err);\n            }\n\n            var endpoints = data.EndpointsResponse.Item;\n            logger.debug(\"get endpoints associated with the userId: \" + userId + \" with data\", endpoints);\n            var endpointToBeDeleted = endpoints[0];\n\n            for (var i = 1; i < endpoints.length; i++) {\n              var timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n              var timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']); // delete the one with invalid effective date\n\n              if (isNaN(timeStamp1)) break;\n\n              if (isNaN(timeStamp2)) {\n                endpointToBeDeleted = endpoints[i];\n                break;\n              }\n\n              if (timeStamp2 < timeStamp1) {\n                endpointToBeDeleted = endpoints[i];\n              }\n            } // update the endpoint's user id with an empty string\n\n\n            var update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointToBeDeleted['Id'],\n              EndpointRequest: {\n                User: {\n                  UserId: ''\n                }\n              }\n            };\n\n            _this.pinpointClient.updateEndpoint(update_params, function (err, data) {\n              if (err) {\n                logger.debug('Failed to update the endpoint', err);\n                return rej(err);\n              }\n\n              logger.debug('The old endpoint is updated with an empty string for user id');\n              return res(data);\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n\n\n  AWSPinpointProvider.prototype._initClients = function (config, credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n\n        if (this.mobileAnalytics && this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2\n          /*return*/\n          ];\n        }\n\n        this._config.credentials = credentials;\n        region = config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.mobileAnalytics = new MobileAnalytics({\n          credentials: credentials,\n          region: region\n        });\n        this.pinpointClient = new Pinpoint({\n          region: region,\n          credentials: credentials\n        });\n\n        if (Platform.isReactNative) {\n          this.pinpointClient.customizeRequests(function (request) {\n            request.on('build', function (req) {\n              req.httpRequest.headers['user-agent'] = Platform.userAgent;\n            });\n          });\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem(cacheKey)];\n\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n\n            if (!endpointId) {\n              endpointId = uuid();\n              Cache.setItem(cacheKey, endpointId);\n            }\n\n            return [2\n            /*return*/\n            , endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n\n\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {}; // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    }; // for backward compatibility\n\n    var clientId = clientContext.clientId,\n        appTitle = clientContext.appTitle,\n        appVersionName = clientContext.appVersionName,\n        appVersionCode = clientContext.appVersionCode,\n        appPackageName = clientContext.appPackageName,\n        demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    }); // eliminate unnecessary params\n\n\n    var userId = tmp.userId,\n        userAttributes = tmp.userAttributes,\n        name = tmp.name,\n        session = tmp.session,\n        eventId = tmp.eventId,\n        immediate = tmp.immediate,\n        ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  /**\n   * @private\n   * check if current credentials exists\n   */\n\n\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\n\nexport default AWSPinpointProvider;","map":{"version":3,"sources":["../../src/Providers/AWSPinpointProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ConsoleLogger as Logger, ClientDevice, Platform, Credentials, Signer, JS, Hub, } from '@aws-amplify/core';\nimport * as MobileAnalytics from 'aws-sdk/clients/mobileanalytics';\nimport * as Pinpoint from 'aws-sdk/clients/pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\n    typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchAnalyticsEvent = function (event, data) {\n    Hub.dispatch('analytics', { event: event, data: data }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar BEACON_SUPPORTED = navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimit }\nvar AWSPinpointProvider = /** @class */ (function () {\n    function AWSPinpointProvider(config) {\n        this._endpointGenerating = true;\n        this._buffer = [];\n        this._config = config ? config : {};\n        this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n        this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n        this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n        this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n        this._clientInfo = ClientDevice.clientInfo();\n    }\n    AWSPinpointProvider.prototype._setupTimer = function () {\n        var _this = this;\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        var _a = this._config, flushSize = _a.flushSize, flushInterval = _a.flushInterval;\n        var that = this;\n        this._timer = setInterval(function () {\n            var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n            for (var i = 0; i < size; i += 1) {\n                var _a = _this._buffer.shift(), params = _a.params, handlers = _a.handlers;\n                that._send(params, handlers);\n                // If this is the first request sent by Analytics module, we should stop sending remaining requests\n                // to prevent race condition of updating one endpoint when it's being created in the backend\n                if (_this._endpointGenerating)\n                    break;\n            }\n        }, flushInterval);\n    };\n    /**\n     * @private\n     * @param params - params for the event recording\n     * Put events into buffer\n     */\n    AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n        var bufferSize = this._config.bufferSize;\n        if (this._buffer.length < bufferSize) {\n            this._buffer.push({ params: params, handlers: handlers });\n        }\n        else {\n            logger.debug('exceed analytics events buffer size');\n            return handlers.reject(new Error('Exceed the size of analytics events buffer'));\n        }\n    };\n    /**\n     * get the category of the plugin\n     */\n    AWSPinpointProvider.prototype.getCategory = function () {\n        return AWSPinpointProvider.category;\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AWSPinpointProvider.prototype.getProviderName = function () {\n        return AWSPinpointProvider.providerName;\n    };\n    /**\n     * configure the plugin\n     * @param {Object} config - configuration\n     */\n    AWSPinpointProvider.prototype.configure = function (config) {\n        var _this = this;\n        logger.debug('configure Analytics', config);\n        var conf = config ? config : {};\n        this._config = Object.assign({}, this._config, conf);\n        if (this._config['appId'] && !this._config['disabled']) {\n            if (!this._config['endpointId']) {\n                var cacheKey = this.getProviderName() + '_' + this._config['appId'];\n                this._getEndpointId(cacheKey)\n                    .then(function (endpointId) {\n                    logger.debug('setting endpoint id from the cache', endpointId);\n                    _this._config['endpointId'] = endpointId;\n                    dispatchAnalyticsEvent('pinpointProvider_configured', null);\n                })\n                    .catch(function (e) {\n                    logger.debug('Failed to generate endpointId', e);\n                });\n            }\n            else {\n                dispatchAnalyticsEvent('pinpointProvider_configured', null);\n            }\n            this._setupTimer();\n        }\n        else {\n            if (this._timer) {\n                clearInterval(this._timer);\n            }\n        }\n        return this._config;\n    };\n    /**\n     * record an event\n     * @param {Object} params - the params of an event\n     */\n    AWSPinpointProvider.prototype.record = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, timestamp;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials || !this._config['appId'] || !this._config['region']) {\n                            logger.debug('cannot send events without credentials, applicationId or region');\n                            return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n                        }\n                        timestamp = new Date().getTime();\n                        // attach the session and eventId\n                        this._generateSession(params);\n                        params.event.eventId = uuid();\n                        Object.assign(params, { timestamp: timestamp, config: this._config, credentials: credentials });\n                        if (params.event.immediate) {\n                            return [2 /*return*/, this._send(params, handlers)];\n                        }\n                        else {\n                            this._putToBuffer(params, handlers);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._generateSession = function (params) {\n        this._sessionId = this._sessionId || uuid();\n        var event = params.event;\n        switch (event.name) {\n            case '_session.start':\n                // refresh the session id and session start time\n                this._sessionStartTimestamp = new Date().getTime();\n                this._sessionId = uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n                break;\n            case '_session.stop':\n                var stopTimestamp = new Date().getTime();\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    Duration: stopTimestamp - this._sessionStartTimestamp,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                    StopTimestamp: new Date(stopTimestamp).toISOString(),\n                };\n                this._sessionId = undefined;\n                this._sessionStartTimestamp = undefined;\n                break;\n            default:\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n                break;\n        }\n    };\n    AWSPinpointProvider.prototype._send = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var event, config;\n            return __generator(this, function (_a) {\n                event = params.event, config = params.config;\n                switch (event.name) {\n                    case '_update_endpoint':\n                        return [2 /*return*/, this._updateEndpoint(params, handlers)];\n                    case '_session.stop':\n                        return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n                    default:\n                        return [2 /*return*/, this._record(params, handlers)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n        var event = params.event, timestamp = params.timestamp, config = params.config, credentials = params.credentials;\n        var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n        var appId = config.appId, endpointId = config.endpointId;\n        var endpointContext = {};\n        var eventParams = {\n            ApplicationId: appId,\n            EventsRequest: {\n                BatchItem: {},\n            },\n        };\n        eventParams.EventsRequest.BatchItem[endpointId] = {};\n        var endpointObj = eventParams.EventsRequest.BatchItem[endpointId];\n        endpointObj['Endpoint'] = endpointContext;\n        endpointObj['Events'] = {};\n        endpointObj['Events'][eventId] = {\n            EventType: name,\n            Timestamp: new Date(timestamp).toISOString(),\n            Attributes: attributes,\n            Metrics: metrics,\n            Session: session,\n        };\n        return eventParams;\n    };\n    AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventId, endpointId, eventParams, request;\n            var _this = this;\n            return __generator(this, function (_a) {\n                eventId = params.event.eventId, endpointId = params.config.endpointId;\n                eventParams = this._generateBatchItemContext(params);\n                request = this.pinpointClient.putEvents(eventParams);\n                // in order to keep backward compatiblity\n                // we are using a legacy api: /apps/{appid}/events/legacy\n                // so that users don't need to update their IAM Policy\n                // will use the formal one in the next break release\n                request.on('build', function () {\n                    request.httpRequest.path = request.httpRequest.path + '/legacy';\n                });\n                request.send(function (err, data) {\n                    if (err) {\n                        logger.error('record event failed. ', err);\n                        logger.warn('If you have not updated your Pinpoint IAM Policy' +\n                            ' with the Action: \"mobiletargeting:PutEvents\" yet, please do it.' +\n                            ' This action is not necessary for now' +\n                            ' but in order to avoid breaking changes in the future,' +\n                            ' please update it as soon as possible.');\n                        return handlers.reject(err);\n                    }\n                    else {\n                        var _a = endpointId, _b = eventId, _c = data.EventsResponse.Results[_a].EventsItemResponse[_b], StatusCode = _c.StatusCode, Message = _c.Message;\n                        if (ACCEPTED_CODES.includes(StatusCode)) {\n                            _this._endpointGenerating = false;\n                            logger.debug('record event success. ', data);\n                            return handlers.resolve(data);\n                        }\n                        else {\n                            if (RETRYABLE_CODES.includes(StatusCode)) {\n                                _this._retry(params, handlers);\n                            }\n                            else {\n                                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                                return handlers.reject(data);\n                            }\n                        }\n                    }\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n        if (!BEACON_SUPPORTED) {\n            this._record(params, handlers);\n            return;\n        }\n        var eventParams = this._generateBatchItemContext(params);\n        var region = this._config.region;\n        var ApplicationId = eventParams.ApplicationId, EventsRequest = eventParams.EventsRequest;\n        var accessInfo = {\n            secret_key: this._config.credentials.secretAccessKey,\n            access_key: this._config.credentials.accessKeyId,\n            session_token: this._config.credentials.sessionToken,\n        };\n        var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events\";\n        var body = JSON.stringify(EventsRequest);\n        var method = 'POST';\n        var request = {\n            url: url,\n            body: body,\n            method: method,\n        };\n        var serviceInfo = { region: region, service: MOBILE_SERVICE_NAME };\n        var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n        var success = navigator.sendBeacon(requestUrl, body);\n        if (success) {\n            return handlers.resolve('sendBeacon success');\n        }\n        return handlers.reject('sendBeacon failure');\n    };\n    AWSPinpointProvider.prototype._retry = function (params, handlers) {\n        var resendLimit = params.config.resendLimit;\n        // For backward compatibility\n        params.resendLimit =\n            typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n        if (params.resendLimit-- > 0) {\n            logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n            this._putToBuffer(params, handlers);\n        }\n        else {\n            logger.debug(\"retry times used up for event \" + params.eventName);\n        }\n    };\n    AWSPinpointProvider.prototype._record = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var event, timestamp, config, credentials;\n            return __generator(this, function (_a) {\n                event = params.event, timestamp = params.timestamp, config = params.config, credentials = params.credentials;\n                this._initClients(config, credentials);\n                return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._updateEndpoint = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timestamp, config, credentials, event, appId, region, endpointId, request, update_params, that;\n            var _this = this;\n            return __generator(this, function (_a) {\n                timestamp = params.timestamp, config = params.config, credentials = params.credentials, event = params.event;\n                appId = config.appId, region = config.region, endpointId = config.endpointId;\n                this._initClients(config, credentials);\n                request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n                update_params = {\n                    ApplicationId: appId,\n                    EndpointId: endpointId,\n                    EndpointRequest: request,\n                };\n                that = this;\n                logger.debug('updateEndpoint with params: ', update_params);\n                that.pinpointClient.updateEndpoint(update_params, function (err, data) {\n                    if (err) {\n                        logger.debug('updateEndpoint failed', err);\n                        if (err.message.startsWith('Exceeded maximum endpoint per user count')) {\n                            _this._removeUnusedEndpoints(appId, request.User.UserId)\n                                .then(function () {\n                                logger.debug('Remove the unused endpoints successfully');\n                                _this._retry(params, handlers);\n                            })\n                                .catch(function (e) {\n                                logger.warn(\"Failed to remove unused endpoints with error: \" + e);\n                                logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" +\n                                    \"with the Action: \\\"mobiletargeting:GetUserEndpoints\\\" \" +\n                                    \"in order to get endpoints info of the user\");\n                                return handlers.reject(err);\n                            });\n                        }\n                        else\n                            return handlers.reject(err);\n                    }\n                    else {\n                        logger.debug('updateEndpoint success', data);\n                        _this._endpointGenerating = false;\n                        return handlers.resolve(data);\n                    }\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._removeUnusedEndpoints = function (appId, userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (res, rej) {\n                        _this.pinpointClient.getUserEndpoints({\n                            ApplicationId: appId,\n                            UserId: userId,\n                        }, function (err, data) {\n                            if (err) {\n                                logger.debug(\"Failed to get endpoints associated with the userId: \" + userId + \" with error\", err);\n                                return rej(err);\n                            }\n                            var endpoints = data.EndpointsResponse.Item;\n                            logger.debug(\"get endpoints associated with the userId: \" + userId + \" with data\", endpoints);\n                            var endpointToBeDeleted = endpoints[0];\n                            for (var i = 1; i < endpoints.length; i++) {\n                                var timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n                                var timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']);\n                                // delete the one with invalid effective date\n                                if (isNaN(timeStamp1))\n                                    break;\n                                if (isNaN(timeStamp2)) {\n                                    endpointToBeDeleted = endpoints[i];\n                                    break;\n                                }\n                                if (timeStamp2 < timeStamp1) {\n                                    endpointToBeDeleted = endpoints[i];\n                                }\n                            }\n                            // update the endpoint's user id with an empty string\n                            var update_params = {\n                                ApplicationId: appId,\n                                EndpointId: endpointToBeDeleted['Id'],\n                                EndpointRequest: {\n                                    User: {\n                                        UserId: '',\n                                    },\n                                },\n                            };\n                            _this.pinpointClient.updateEndpoint(update_params, function (err, data) {\n                                if (err) {\n                                    logger.debug('Failed to update the endpoint', err);\n                                    return rej(err);\n                                }\n                                logger.debug('The old endpoint is updated with an empty string for user id');\n                                return res(data);\n                            });\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * @private\n     * @param config\n     * Init the clients\n     */\n    AWSPinpointProvider.prototype._initClients = function (config, credentials) {\n        return __awaiter(this, void 0, void 0, function () {\n            var region;\n            return __generator(this, function (_a) {\n                logger.debug('init clients');\n                if (this.mobileAnalytics &&\n                    this.pinpointClient &&\n                    this._config.credentials &&\n                    this._config.credentials.sessionToken === credentials.sessionToken &&\n                    this._config.credentials.identityId === credentials.identityId) {\n                    logger.debug('no change for aws credentials, directly return from init');\n                    return [2 /*return*/];\n                }\n                this._config.credentials = credentials;\n                region = config.region;\n                logger.debug('init clients with credentials', credentials);\n                this.mobileAnalytics = new MobileAnalytics({ credentials: credentials, region: region });\n                this.pinpointClient = new Pinpoint({ region: region, credentials: credentials });\n                if (Platform.isReactNative) {\n                    this.pinpointClient.customizeRequests(function (request) {\n                        request.on('build', function (req) {\n                            req.httpRequest.headers['user-agent'] = Platform.userAgent;\n                        });\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem(cacheKey)];\n                    case 1:\n                        endpointId = _a.sent();\n                        logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n                        if (!endpointId) {\n                            endpointId = uuid();\n                            Cache.setItem(cacheKey, endpointId);\n                        }\n                        return [2 /*return*/, endpointId];\n                }\n            });\n        });\n    };\n    /**\n     * EndPoint request\n     * @return {Object} - The request of updating endpoint\n     */\n    AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n        var credentials = config.credentials;\n        var clientInfo = this._clientInfo || {};\n        var clientContext = config.clientContext || {};\n        // for now we have three different ways for default endpoint configurations\n        // clientInfo\n        // clientContext (deprecated)\n        // config.endpoint\n        var defaultEndpointConfig = config.endpoint || {};\n        var demographicByClientInfo = {\n            appVersion: clientInfo.appVersion,\n            make: clientInfo.make,\n            model: clientInfo.model,\n            modelVersion: clientInfo.version,\n            platform: clientInfo.platform,\n        };\n        // for backward compatibility\n        var clientId = clientContext.clientId, appTitle = clientContext.appTitle, appVersionName = clientContext.appVersionName, appVersionCode = clientContext.appVersionCode, appPackageName = clientContext.appPackageName, demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n        var channelType = event.address\n            ? clientInfo.platform === 'android'\n                ? 'GCM'\n                : 'APNS'\n            : undefined;\n        var tmp = __assign(__assign(__assign({ channelType: channelType, requestId: uuid(), effectiveDate: new Date().toISOString() }, defaultEndpointConfig), event), { attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes), demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic), location: __assign(__assign({}, defaultEndpointConfig.location), event.location), metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics), user: {\n                userId: event.userId ||\n                    defaultEndpointConfig.userId ||\n                    credentials.identityId,\n                userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes),\n            } });\n        // eliminate unnecessary params\n        var userId = tmp.userId, userAttributes = tmp.userAttributes, name = tmp.name, session = tmp.session, eventId = tmp.eventId, immediate = tmp.immediate, ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n        return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n    };\n    /**\n     * @private\n     * check if current credentials exists\n     */\n    AWSPinpointProvider.prototype._getCredentials = function () {\n        var that = this;\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return null;\n            logger.debug('set credentials for analytics', credentials);\n            return Credentials.shear(credentials);\n        })\n            .catch(function (err) {\n            logger.debug('ensure credentials error', err);\n            return null;\n        });\n    };\n    AWSPinpointProvider.category = 'Analytics';\n    AWSPinpointProvider.providerName = 'AWSPinpoint';\n    return AWSPinpointProvider;\n}());\nexport default AWSPinpointProvider;\n//# sourceMappingURL=AWSPinpointProvider.js.map"]},"metadata":{},"sourceType":"module"}