{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyMap from '../jsutils/keyMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n\n          if (isInvalid(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = objectValues(type.getFields());\n\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (isInvalid(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}","map":{"version":3,"names":["keyMap","isInvalid","objectValues","Kind","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","NULL","ofType","VARIABLE","variableName","name","value","variableValue","itemType","LIST","coercedValues","itemNodes","values","i","length","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","getFields","_i","fieldNode","defaultValue","undefined","fieldValue","ENUM","enumValue","getValue","result","parseLiteral","_error","Error","concat"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/valueFromAST.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyMap from '../jsutils/keyMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n\n          if (isInvalid(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = objectValues(type.getFields());\n\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (isInvalid(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}