{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at \") + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = directives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var directive = _step.value;\n            var directiveName = directive.name.value;\n\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n            } else {\n              knownDirectives[directiveName] = directive;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateDirectiveMessage","directiveName","concat","UniqueDirectivesPerLocation","context","enter","node","directives","knownDirectives","Object","create","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","directive","value","name","reportError","err","return"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at \") + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = directives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var directive = _step.value;\n            var directiveName = directive.name.value;\n\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n            } else {\n              knownDirectives[directiveName] = directive;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,yBAAT,CAAmCC,aAAnC,EAAkD;EACvD,OAAO,mBAAmBC,MAAnB,CAA0BD,aAA1B,EAAyC,8BAAzC,IAA2E,gBAAlF;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,2BAAT,CAAqCC,OAArC,EAA8C;EACnD,OAAO;IACL;IACA;IACA;IACAC,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;MAC1B;MACA,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;;MAEA,IAAIA,UAAJ,EAAgB;QACd,IAAIC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;QACA,IAAIC,yBAAyB,GAAG,IAAhC;QACA,IAAIC,iBAAiB,GAAG,KAAxB;QACA,IAAIC,cAAc,GAAGC,SAArB;;QAEA,IAAI;UACF,KAAK,IAAIC,SAAS,GAAGR,UAAU,CAACS,MAAM,CAACC,QAAR,CAAV,EAAhB,EAA+CC,KAApD,EAA2D,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAA3D,EAA2HT,yBAAyB,GAAG,IAAvJ,EAA6J;YAC3J,IAAIU,SAAS,GAAGH,KAAK,CAACI,KAAtB;YACA,IAAIrB,aAAa,GAAGoB,SAAS,CAACE,IAAV,CAAeD,KAAnC;;YAEA,IAAId,eAAe,CAACP,aAAD,CAAnB,EAAoC;cAClCG,OAAO,CAACoB,WAAR,CAAoB,IAAIzB,YAAJ,CAAiBC,yBAAyB,CAACC,aAAD,CAA1C,EAA2D,CAACO,eAAe,CAACP,aAAD,CAAhB,EAAiCoB,SAAjC,CAA3D,CAApB;YACD,CAFD,MAEO;cACLb,eAAe,CAACP,aAAD,CAAf,GAAiCoB,SAAjC;YACD;UACF;QACF,CAXD,CAWE,OAAOI,GAAP,EAAY;UACZb,iBAAiB,GAAG,IAApB;UACAC,cAAc,GAAGY,GAAjB;QACD,CAdD,SAcU;UACR,IAAI;YACF,IAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;cAC1DX,SAAS,CAACW,MAAV;YACD;UACF,CAJD,SAIU;YACR,IAAId,iBAAJ,EAAuB;cACrB,MAAMC,cAAN;YACD;UACF;QACF;MACF;IACF;EAxCI,CAAP;AA0CD"},"metadata":{},"sourceType":"module"}