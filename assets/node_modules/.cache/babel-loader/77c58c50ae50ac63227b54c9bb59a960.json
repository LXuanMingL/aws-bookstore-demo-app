{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar lists = [];\n\nvar MethodEmbed =\n/** @class */\nfunction () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n\n    this.context[this.methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return methodOverride(_this._originalMethod.apply(_this, args));\n    };\n  };\n\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n\n  return MethodEmbed;\n}();\n\nexport default MethodEmbed;\n\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n\n  return instance;\n}","map":{"version":3,"sources":["../../src/utils/MethodEmbed.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AAEH,IAAM,KAAK,GAAkB,EAA7B;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;EAcC,SAAA,WAAA,CAAY,OAAZ,EAAqB,UAArB,EAA+B;IAC9B,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,UAAL,GAAkB,UAAlB;IAEA,KAAK,eAAL,GAAuB,OAAO,CAAC,UAAD,CAAP,CAAoB,IAApB,CAAyB,OAAzB,CAAvB;EACA;;EAbM,WAAA,CAAA,GAAA,GAAP,UAAW,OAAX,EAAoB,UAApB,EAAgC,cAAhC,EAA8C;IAC7C,WAAW,CAAC,OAAD,EAAU,UAAV,CAAX,CAAiC,GAAjC,CAAqC,cAArC;EACA,CAFM;;EAIA,WAAA,CAAA,MAAA,GAAP,UAAc,OAAd,EAAuB,UAAvB,EAAiC;IAChC,WAAW,CAAC,OAAD,EAAU,UAAV,CAAX,CAAiC,MAAjC;EACA,CAFM;;EAWA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,cAAX,EAAyB;IAAzB,IAAA,KAAA,GAAA,IAAA;;IACC,KAAK,OAAL,CAAa,KAAK,UAAlB,IAAgC,YAAA;MAAC,IAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAO;QAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;MAChC,OAAO,cAAc,CAAC,KAAI,CAAC,eAAL,CAAoB,KAApB,CAAA,KAAA,EAAwB,IAAxB,CAAD,CAArB;IACA,CAFD;EAGA,CAJM;;EAMA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACC,KAAK,OAAL,CAAa,KAAK,UAAlB,IAAgC,KAAK,eAArC;EACA,CAFM;;EAGR,OAAA,WAAA;AAAC,CA9BD,EAAA;;;;AAgCA,SAAS,WAAT,CAAqB,OAArB,EAA8B,UAA9B,EAAwC;EACvC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAN,CACd,UAAA,CAAA,EAAC;IAAI,OAAA,CAAC,CAAC,OAAF,KAAc,OAAd,IAAyB,CAAC,CAAC,UAAF,KAAzB,UAAA;EAAoD,CAD3C,EAEb,CAFa,CAAf;;EAIA,IAAI,CAAC,QAAL,EAAe;IACd,QAAQ,GAAG,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,UAAzB,CAAX;IACA,KAAK,CAAC,IAAN,CAAW,QAAX;EACA;;EAED,OAAO,QAAP;AACA","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar lists = [];\nvar MethodEmbed = /** @class */ (function () {\n    function MethodEmbed(context, methodName) {\n        this.context = context;\n        this.methodName = methodName;\n        this._originalMethod = context[methodName].bind(context);\n    }\n    MethodEmbed.add = function (context, methodName, methodOverride) {\n        getInstance(context, methodName).set(methodOverride);\n    };\n    MethodEmbed.remove = function (context, methodName) {\n        getInstance(context, methodName).remove();\n    };\n    MethodEmbed.prototype.set = function (methodOverride) {\n        var _this = this;\n        this.context[this.methodName] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return methodOverride(_this._originalMethod.apply(_this, args));\n        };\n    };\n    MethodEmbed.prototype.remove = function () {\n        this.context[this.methodName] = this._originalMethod;\n    };\n    return MethodEmbed;\n}());\nexport default MethodEmbed;\nfunction getInstance(context, methodName) {\n    var instance = lists.filter(function (h) { return h.context === context && h.methodName === methodName; })[0];\n    if (!instance) {\n        instance = new MethodEmbed(context, methodName);\n        lists.push(instance);\n    }\n    return instance;\n}\n//# sourceMappingURL=MethodEmbed.js.map"]},"metadata":{},"sourceType":"module"}