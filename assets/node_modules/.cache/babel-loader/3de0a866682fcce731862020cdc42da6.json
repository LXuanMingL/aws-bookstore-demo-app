{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition';\nexport function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = \"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type, \"\\\".\");\n\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = quotedOrList(suggestedTypeNames);\n    message += \" Did you mean to use an inline fragment on \".concat(suggestions, \"?\");\n  } else if (suggestedFieldNames.length !== 0) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedFieldNames), \"?\");\n  }\n\n  return message;\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\nexport function FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest\n * them, sorted by how often the type is referenced, starting with Interfaces.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (isAbstractType(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schema.getPossibleTypes(type)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var possibleType = _step.value;\n\n        if (!possibleType.getFields()[fieldName]) {\n          continue;\n        } // This object type defines this field.\n\n\n        suggestedObjectTypes.push(possibleType.name);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = possibleType.getInterfaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var possibleInterface = _step2.value;\n\n            if (!possibleInterface.getFields()[fieldName]) {\n              continue;\n            } // This interface type defines this field.\n\n\n            interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // Suggest interface types based on how common they are.\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}","map":{"version":3,"names":["GraphQLError","suggestionList","quotedOrList","isObjectType","isInterfaceType","isAbstractType","undefinedFieldMessage","fieldName","type","suggestedTypeNames","suggestedFieldNames","message","concat","length","suggestions","FieldsOnCorrectType","context","Field","node","getParentType","fieldDef","getFieldDef","schema","getSchema","name","value","getSuggestedTypeNames","getSuggestedFieldNames","reportError","suggestedObjectTypes","interfaceUsageCount","Object","create","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getPossibleTypes","Symbol","iterator","_step","next","done","possibleType","getFields","push","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getInterfaces","_step2","possibleInterface","err","return","suggestedInterfaceTypes","keys","sort","a","b","possibleFieldNames"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/rules/FieldsOnCorrectType.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition';\nexport function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = \"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type, \"\\\".\");\n\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = quotedOrList(suggestedTypeNames);\n    message += \" Did you mean to use an inline fragment on \".concat(suggestions, \"?\");\n  } else if (suggestedFieldNames.length !== 0) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedFieldNames), \"?\");\n  }\n\n  return message;\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\nexport function FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest\n * them, sorted by how often the type is referenced, starting with Interfaces.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (isAbstractType(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schema.getPossibleTypes(type)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var possibleType = _step.value;\n\n        if (!possibleType.getFields()[fieldName]) {\n          continue;\n        } // This object type defines this field.\n\n\n        suggestedObjectTypes.push(possibleType.name);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = possibleType.getInterfaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var possibleInterface = _step2.value;\n\n            if (!possibleInterface.getFields()[fieldName]) {\n              continue;\n            } // This interface type defines this field.\n\n\n            interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // Suggest interface types based on how common they are.\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}