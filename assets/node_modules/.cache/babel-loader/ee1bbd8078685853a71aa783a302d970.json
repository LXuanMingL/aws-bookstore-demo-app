{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type kind: \".concat(typeNode.kind, \".\"));\n}","map":{"version":3,"names":["Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value","Error","concat"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/typeFromAST.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type kind: \".concat(typeNode.kind, \".\"));\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;EAC5C;EACA,IAAIC,SAAJ;;EAEA,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACQ,SAA3B,EAAsC;IACpCF,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAIL,WAAW,CAACK,SAAD,CAA/B;EACD;;EAED,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACU,aAA3B,EAA0C;IACxCJ,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAD,CAAlC;EACD;;EAED,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACW,UAA3B,EAAuC;IACrC,OAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;EACD;EACD;;;EAGA,MAAM,IAAIC,KAAJ,CAAU,yBAAyBC,MAAzB,CAAgCX,QAAQ,CAACE,IAAzC,EAA+C,GAA/C,CAAV,CAAN;AACD"},"metadata":{},"sourceType":"module"}