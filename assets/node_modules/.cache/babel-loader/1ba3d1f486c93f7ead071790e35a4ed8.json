{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\n\n\nvar Int64 =\n/** @class */\nfunction () {\n  function Int64(bytes) {\n    this.bytes = bytes;\n\n    if (bytes.byteLength !== 8) {\n      throw new Error('Int64 buffers must be exactly 8 bytes');\n    }\n  }\n\n  Int64.fromNumber = function (number) {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n      throw new Error(number + \" is too large (or, if negative, too small) to represent as an Int64\");\n    }\n\n    var bytes = new Uint8Array(8);\n\n    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n\n    if (number < 0) {\n      negate(bytes);\n    }\n\n    return new Int64(bytes);\n  };\n  /**\n   * Called implicitly by infix arithmetic operators.\n   */\n\n\n  Int64.prototype.valueOf = function () {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n\n    if (negative) {\n      negate(bytes);\n    }\n\n    return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n  };\n\n  Int64.prototype.toString = function () {\n    return String(this.valueOf());\n  };\n\n  return Int64;\n}();\n\nexports.Int64 = Int64;\n\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"sources":["../src/Int64.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,mBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;AAEA;;;;;;AAMG;;;AACH,IAAA,KAAA;AAAA;AAAA,YAAA;EACI,SAAA,KAAA,CAAqB,KAArB,EAAsC;IAAjB,KAAA,KAAA,GAAA,KAAA;;IACjB,IAAI,KAAK,CAAC,UAAN,KAAqB,CAAzB,EAA4B;MACxB,MAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;IACH;EACJ;;EAEM,KAAA,CAAA,UAAA,GAAP,UAAkB,MAAlB,EAAgC;IAC5B,IAAI,MAAM,GAAG,mBAAT,IAAgC,MAAM,GAAG,CAAC,mBAA9C,EAAmE;MAC/D,MAAM,IAAI,KAAJ,CACC,MAAM,GAAA,qEADP,CAAN;IAGH;;IAED,IAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAd;;IACA,KACI,IAAI,CAAC,GAAG,CAAR,EAAW,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,MAAX,CAAT,CAD3B,EAEI,CAAC,GAAG,CAAC,CAAL,IAAU,SAAS,GAAG,CAF1B,EAGI,CAAC,IAAI,SAAS,IAAI,GAHtB,EAIE;MACE,KAAK,CAAC,CAAD,CAAL,GAAW,SAAX;IACH;;IAED,IAAI,MAAM,GAAG,CAAb,EAAgB;MACZ,MAAM,CAAC,KAAD,CAAN;IACH;;IAED,OAAO,IAAI,KAAJ,CAAU,KAAV,CAAP;EACH,CArBM;EAuBP;;AAEG;;;EACH,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;IACI,IAAM,KAAK,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,CAAjB,CAAd;IACA,IAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5B;;IACA,IAAI,QAAJ,EAAc;MACV,MAAM,CAAC,KAAD,CAAN;IACH;;IAED,OAAO,QAAQ,CAAC,mBAAA,CAAA,KAAA,CAAM,KAAN,CAAD,EAAe,EAAf,CAAR,IAA8B,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAA9C,CAAP;EACH,CARD;;EAUA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACI,OAAO,MAAM,CAAC,KAAK,OAAL,EAAD,CAAb;EACH,CAFD;;EAGJ,OAAA,KAAA;AAAC,CA9CD,EAAA;;AAAa,OAAA,CAAA,KAAA,GAAA,KAAA;;AAgDb,SAAS,MAAT,CAAgB,KAAhB,EAAiC;EAC7B,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;IACxB,KAAK,CAAC,CAAD,CAAL,IAAY,IAAZ;EACH;;EAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAArB,EAAwB,CAAC,EAAzB,EAA6B;IACzB,KAAK,CAAC,CAAD,CAAL;IACA,IAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;EACvB;AACJ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\nvar Int64 = /** @class */ (function () {\n    function Int64(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error('Int64 buffers must be exactly 8 bytes');\n        }\n    }\n    Int64.fromNumber = function (number) {\n        if (number > 9223372036854775807 || number < -9223372036854775808) {\n            throw new Error(number + \" is too large (or, if negative, too small) to represent as an Int64\");\n        }\n        var bytes = new Uint8Array(8);\n        for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    };\n    /**\n     * Called implicitly by infix arithmetic operators.\n     */\n    Int64.prototype.valueOf = function () {\n        var bytes = this.bytes.slice(0);\n        var negative = bytes[0] & 128;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n    };\n    Int64.prototype.toString = function () {\n        return String(this.valueOf());\n    };\n    return Int64;\n}());\nexports.Int64 = Int64;\nfunction negate(bytes) {\n    for (var i = 0; i < 8; i++) {\n        bytes[i] ^= 0xFF;\n    }\n    for (var i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n//# sourceMappingURL=Int64.js.map"]},"metadata":{},"sourceType":"script"}