{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport closest from './closest';\nimport matches from './matches';\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\n\nexport default function delegate(ancestor, eventType, selector, callback, opts) {\n  if (opts === void 0) {\n    opts = {};\n  } // Defines the event listener.\n\n\n  var listener = function listener(event) {\n    var delegateTarget; // If opts.composed is true and the event originated from inside a Shadow\n    // tree, check the composed path nodes.\n\n    if (opts['composed'] && typeof event['composedPath'] === 'function') {\n      var composedPath = event.composedPath();\n\n      for (var i = 0, node = void 0; node = composedPath[i]; i++) {\n        if (node.nodeType === 1 && matches(node, selector)) {\n          delegateTarget = node;\n        }\n      }\n    } else {\n      // Otherwise check the parents.\n      delegateTarget = closest(event.target, selector, true);\n    }\n\n    if (delegateTarget) {\n      callback.call(delegateTarget, event, delegateTarget);\n    }\n  };\n\n  ancestor.addEventListener(eventType, listener, opts['useCapture']);\n  return {\n    destroy: function destroy() {\n      ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/vendor/dom-utils/delegate.ts"],"names":[],"mappings":"AAAA;;AAEG;AAEH,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA;;;;;;;;;;;AAWG;;AACH,eAAc,SAAU,QAAV,CACb,QADa,EAEb,SAFa,EAGb,QAHa,EAIb,QAJa,EAKb,IALa,EAKJ;EAAT,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,EAAA;EAAS,CAAA,CAET;;;EACA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAS,KAAT,EAAc;IAC9B,IAAI,cAAJ,CAD8B,CAG9B;IACA;;IACA,IAAI,IAAI,CAAC,UAAD,CAAJ,IAAoB,OAAO,KAAK,CAAC,cAAD,CAAZ,KAAiC,UAAzD,EAAqE;MACpE,IAAM,YAAY,GAAG,KAAK,CAAC,YAAN,EAArB;;MACA,KAAK,IAAI,CAAC,GAAG,CAAR,EAAW,IAAI,GAAA,KAAA,CAApB,EAAuB,IAAI,GAAG,YAAY,CAAC,CAAD,CAA1C,EAAgD,CAAC,EAAjD,EAAqD;QACpD,IAAI,IAAI,CAAC,QAAL,KAAkB,CAAlB,IAAuB,OAAO,CAAC,IAAD,EAAO,QAAP,CAAlC,EAAoD;UACnD,cAAc,GAAG,IAAjB;QACA;MACD;IACD,CAPD,MAOO;MACN;MACA,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,MAAP,EAAe,QAAf,EAAyB,IAAzB,CAAxB;IACA;;IAED,IAAI,cAAJ,EAAoB;MACnB,QAAQ,CAAC,IAAT,CAAc,cAAd,EAA8B,KAA9B,EAAqC,cAArC;IACA;EACD,CApBD;;EAsBA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,QAArC,EAA+C,IAAI,CAAC,YAAD,CAAnD;EAEA,OAAO;IACN,OAAO,EAAE,mBAAA;MACR,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,QAAxC,EAAkD,IAAI,CAAC,YAAD,CAAtD;IACA;EAHK,CAAP;AAKA","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport closest from './closest';\nimport matches from './matches';\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\nexport default function delegate(ancestor, eventType, selector, callback, opts) {\n    if (opts === void 0) { opts = {}; }\n    // Defines the event listener.\n    var listener = function (event) {\n        var delegateTarget;\n        // If opts.composed is true and the event originated from inside a Shadow\n        // tree, check the composed path nodes.\n        if (opts['composed'] && typeof event['composedPath'] === 'function') {\n            var composedPath = event.composedPath();\n            for (var i = 0, node = void 0; (node = composedPath[i]); i++) {\n                if (node.nodeType === 1 && matches(node, selector)) {\n                    delegateTarget = node;\n                }\n            }\n        }\n        else {\n            // Otherwise check the parents.\n            delegateTarget = closest(event.target, selector, true);\n        }\n        if (delegateTarget) {\n            callback.call(delegateTarget, event, delegateTarget);\n        }\n    };\n    ancestor.addEventListener(eventType, listener, opts['useCapture']);\n    return {\n        destroy: function () {\n            ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n        },\n    };\n}\n//# sourceMappingURL=delegate.js.map"]},"metadata":{},"sourceType":"module"}