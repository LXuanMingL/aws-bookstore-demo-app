{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { AWS } from './Facet';\n\nvar logger = new Logger('Signer'),\n    url = require('url'),\n    crypto = AWS['util'].crypto;\n\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n\nvar encrypt = function encrypt(key, src, encoding) {\n  return crypto.lib.createHmac('sha256', key).update(src, 'utf8').digest(encoding);\n};\n\nvar hash = function hash(src) {\n  var arg = src || '';\n  return crypto.createHash('sha256').update(arg, 'utf8').digest('hex');\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\n\n\nvar escape_RFC3986 = function escape_RFC3986(component) {\n  return component.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n};\n/**\n * @private\n * Create canonical query string\n *\n */\n\n\nvar canonical_query = function canonical_query(query) {\n  if (!query || query.length === 0) {\n    return '';\n  }\n\n  return query.split('&').map(function (e) {\n    var key_val = e.split('=');\n\n    if (key_val.length === 1) {\n      return e;\n    } else {\n      var reencoded_val = escape_RFC3986(key_val[1]);\n      return key_val[0] + '=' + reencoded_val;\n    }\n  }).sort(function (a, b) {\n    var key_a = a.split('=')[0];\n    var key_b = b.split('=')[0];\n\n    if (key_a === key_b) {\n      return a < b ? -1 : 1;\n    } else {\n      return key_a < key_b ? -1 : 1;\n    }\n  }).join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\n\n\nvar canonical_headers = function canonical_headers(headers) {\n  if (!headers || Object.keys(headers).length === 0) {\n    return '';\n  }\n\n  return Object.keys(headers).map(function (key) {\n    return {\n      key: key.toLowerCase(),\n      value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (item) {\n    return item.key + ':' + item.value;\n  }).join('\\n') + '\\n';\n};\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\n\n\nvar signed_headers = function signed_headers(headers) {\n  return Object.keys(headers).map(function (key) {\n    return key.toLowerCase();\n  }).sort().join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\n\n\nvar canonical_request = function canonical_request(request) {\n  var url_info = url.parse(request.url);\n  return [request.method || '/', encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'), canonical_query(url_info.query), canonical_headers(request.headers), signed_headers(request.headers), hash(request.data)].join('\\n');\n};\n\nvar parse_service_info = function parse_service_info(request) {\n  var url_info = url.parse(request.url),\n      host = url_info.host;\n  var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n  var parsed = (matched || []).slice(1, 3);\n\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n\n  return {\n    service: request.service || parsed[0],\n    region: request.region || parsed[1]\n  };\n};\n\nvar credential_scope = function credential_scope(d_str, region, service) {\n  return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\n\n\nvar string_to_sign = function string_to_sign(algorithm, canonical_request, dt_str, scope) {\n  return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\n\n\nvar get_signing_key = function get_signing_key(secret_key, d_str, service_info) {\n  logger.debug(service_info);\n  var k = 'AWS4' + secret_key,\n      k_date = encrypt(k, d_str),\n      k_region = encrypt(k_date, service_info.region),\n      k_service = encrypt(k_region, service_info.service),\n      k_signing = encrypt(k_service, 'aws4_request');\n  return k_signing;\n};\n\nvar get_signature = function get_signature(signing_key, str_to_sign) {\n  return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\n\n\nvar get_authorization_header = function get_authorization_header(algorithm, access_key, scope, signed_headers, signature) {\n  return [algorithm + ' ' + 'Credential=' + access_key + '/' + scope, 'SignedHeaders=' + signed_headers, 'Signature=' + signature].join(', ');\n};\n/**\n * AWS request signer.\n * Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n *\n * @class Signer\n */\n\n\nvar Signer =\n/** @class */\nfunction () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n\n\n  Signer.sign = function (request, access_info, service_info) {\n    if (service_info === void 0) {\n      service_info = null;\n    }\n\n    request.headers = request.headers || {}; // datetime string and date string\n\n    var dt = new Date(),\n        dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n        d_str = dt_str.substr(0, 8);\n    var url_info = url.parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n\n    if (access_info.session_token) {\n      request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    } // Task 1: Create a Canonical Request\n\n\n    var request_str = canonical_request(request);\n    logger.debug(request_str); // Task 2: Create a String to Sign\n\n    var serviceInfo = service_info || parse_service_info(request),\n        scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n        str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope); // Task 3: Calculate the Signature\n\n    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo),\n        signature = get_signature(signing_key, str_to_sign); // Task 4: Adding the Signing information to the Request\n\n    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n  };\n\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var today = now.substr(0, 8); // Intentionally discarding search\n\n    var _a = url.parse(urlToSign, true, true),\n        search = _a.search,\n        parsedUrl = __rest(_a, [\"search\"]);\n\n    var host = parsedUrl.host;\n    var signedHeaders = {\n      host: host\n    };\n\n    var _b = serviceInfo || parse_service_info({\n      url: url.format(parsedUrl)\n    }),\n        region = _b.region,\n        service = _b.service;\n\n    var credentialScope = credential_scope(today, region, service); // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\n    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n\n    var queryParams = __assign(__assign(__assign({\n      'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n      'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n      'X-Amz-Date': now.substr(0, 16)\n    }, sessionTokenRequired ? {\n      'X-Amz-Security-Token': \"\" + accessInfo.session_token\n    } : {}), expiration ? {\n      'X-Amz-Expires': \"\" + expiration\n    } : {}), {\n      'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',')\n    });\n\n    var canonicalRequest = canonical_request({\n      method: method,\n      url: url.format(__assign(__assign({}, parsedUrl), {\n        query: __assign(__assign({}, parsedUrl.query), queryParams)\n      })),\n      headers: signedHeaders,\n      data: body\n    });\n    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n    var signing_key = get_signing_key(accessInfo.secret_key, today, {\n      region: region,\n      service: service\n    });\n    var signature = get_signature(signing_key, stringToSign);\n\n    var additionalQueryParams = __assign({\n      'X-Amz-Signature': signature\n    }, accessInfo.session_token && {\n      'X-Amz-Security-Token': accessInfo.session_token\n    });\n\n    var result = url.format({\n      protocol: parsedUrl.protocol,\n      slashes: true,\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port,\n      pathname: parsedUrl.pathname,\n      query: __assign(__assign(__assign({}, parsedUrl.query), queryParams), additionalQueryParams)\n    });\n    return result;\n  };\n\n  return Signer;\n}();\n\nexport default Signer;","map":{"version":3,"sources":["../src/Signer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport { AWS } from './Facet';\nvar logger = new Logger('Signer'), url = require('url'), crypto = AWS['util'].crypto;\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\nvar encrypt = function (key, src, encoding) {\n    return crypto.lib\n        .createHmac('sha256', key)\n        .update(src, 'utf8')\n        .digest(encoding);\n};\nvar hash = function (src) {\n    var arg = src || '';\n    return crypto\n        .createHash('sha256')\n        .update(arg, 'utf8')\n        .digest('hex');\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nvar escape_RFC3986 = function (component) {\n    return component.replace(/[!'()*]/g, function (c) {\n        return ('%' +\n            c\n                .charCodeAt(0)\n                .toString(16)\n                .toUpperCase());\n    });\n};\n/**\n * @private\n * Create canonical query string\n *\n */\nvar canonical_query = function (query) {\n    if (!query || query.length === 0) {\n        return '';\n    }\n    return query\n        .split('&')\n        .map(function (e) {\n        var key_val = e.split('=');\n        if (key_val.length === 1) {\n            return e;\n        }\n        else {\n            var reencoded_val = escape_RFC3986(key_val[1]);\n            return key_val[0] + '=' + reencoded_val;\n        }\n    })\n        .sort(function (a, b) {\n        var key_a = a.split('=')[0];\n        var key_b = b.split('=')[0];\n        if (key_a === key_b) {\n            return a < b ? -1 : 1;\n        }\n        else {\n            return key_a < key_b ? -1 : 1;\n        }\n    })\n        .join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nvar canonical_headers = function (headers) {\n    if (!headers || Object.keys(headers).length === 0) {\n        return '';\n    }\n    return (Object.keys(headers)\n        .map(function (key) {\n        return {\n            key: key.toLowerCase(),\n            value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : '',\n        };\n    })\n        .sort(function (a, b) {\n        return a.key < b.key ? -1 : 1;\n    })\n        .map(function (item) {\n        return item.key + ':' + item.value;\n    })\n        .join('\\n') + '\\n');\n};\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\nvar signed_headers = function (headers) {\n    return Object.keys(headers)\n        .map(function (key) {\n        return key.toLowerCase();\n    })\n        .sort()\n        .join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nvar canonical_request = function (request) {\n    var url_info = url.parse(request.url);\n    return [\n        request.method || '/',\n        encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'),\n        canonical_query(url_info.query),\n        canonical_headers(request.headers),\n        signed_headers(request.headers),\n        hash(request.data),\n    ].join('\\n');\n};\nvar parse_service_info = function (request) {\n    var url_info = url.parse(request.url), host = url_info.host;\n    var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n    var parsed = (matched || []).slice(1, 3);\n    if (parsed[1] === 'es') {\n        // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: request.service || parsed[0],\n        region: request.region || parsed[1],\n    };\n};\nvar credential_scope = function (d_str, region, service) {\n    return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n    return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nvar get_signing_key = function (secret_key, d_str, service_info) {\n    logger.debug(service_info);\n    var k = 'AWS4' + secret_key, k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, 'aws4_request');\n    return k_signing;\n};\nvar get_signature = function (signing_key, str_to_sign) {\n    return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n    return [\n        algorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n        'SignedHeaders=' + signed_headers,\n        'Signature=' + signature,\n    ].join(', ');\n};\n/**\n * AWS request signer.\n * Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n *\n * @class Signer\n */\nvar Signer = /** @class */ (function () {\n    function Signer() {\n    }\n    /**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n    Signer.sign = function (request, access_info, service_info) {\n        if (service_info === void 0) { service_info = null; }\n        request.headers = request.headers || {};\n        // datetime string and date string\n        var dt = new Date(), dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''), d_str = dt_str.substr(0, 8);\n        var url_info = url.parse(request.url);\n        request.headers['host'] = url_info.host;\n        request.headers['x-amz-date'] = dt_str;\n        if (access_info.session_token) {\n            request.headers['X-Amz-Security-Token'] = access_info.session_token;\n        }\n        // Task 1: Create a Canonical Request\n        var request_str = canonical_request(request);\n        logger.debug(request_str);\n        // Task 2: Create a String to Sign\n        var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);\n        // Task 3: Calculate the Signature\n        var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);\n        // Task 4: Adding the Signing information to the Request\n        var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n        request.headers['Authorization'] = authorization_header;\n        return request;\n    };\n    Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n        var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n        var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n        var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n        var now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        var today = now.substr(0, 8);\n        // Intentionally discarding search\n        var _a = url.parse(urlToSign, true, true), search = _a.search, parsedUrl = __rest(_a, [\"search\"]);\n        var host = parsedUrl.host;\n        var signedHeaders = { host: host };\n        var _b = serviceInfo || parse_service_info({ url: url.format(parsedUrl) }), region = _b.region, service = _b.service;\n        var credentialScope = credential_scope(today, region, service);\n        // IoT service does not allow the session token in the canonical request\n        // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n        var queryParams = __assign(__assign(__assign({ 'X-Amz-Algorithm': DEFAULT_ALGORITHM, 'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'), 'X-Amz-Date': now.substr(0, 16) }, (sessionTokenRequired\n            ? { 'X-Amz-Security-Token': \"\" + accessInfo.session_token }\n            : {})), (expiration ? { 'X-Amz-Expires': \"\" + expiration } : {})), { 'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',') });\n        var canonicalRequest = canonical_request({\n            method: method,\n            url: url.format(__assign(__assign({}, parsedUrl), { query: __assign(__assign({}, parsedUrl.query), queryParams) })),\n            headers: signedHeaders,\n            data: body,\n        });\n        var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n        var signing_key = get_signing_key(accessInfo.secret_key, today, {\n            region: region,\n            service: service,\n        });\n        var signature = get_signature(signing_key, stringToSign);\n        var additionalQueryParams = __assign({ 'X-Amz-Signature': signature }, (accessInfo.session_token && {\n            'X-Amz-Security-Token': accessInfo.session_token,\n        }));\n        var result = url.format({\n            protocol: parsedUrl.protocol,\n            slashes: true,\n            hostname: parsedUrl.hostname,\n            port: parsedUrl.port,\n            pathname: parsedUrl.pathname,\n            query: __assign(__assign(__assign({}, parsedUrl.query), queryParams), additionalQueryParams),\n        });\n        return result;\n    };\n    return Signer;\n}());\nexport default Signer;\n//# sourceMappingURL=Signer.js.map"]},"metadata":{},"sourceType":"module"}