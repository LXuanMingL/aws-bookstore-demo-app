{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { isAbstractType, isObjectType, isInterfaceType, isUnionType, isInputObjectType, isWrappingType } from './definition';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport inspect from '../jsutils/inspect';\nimport { __Schema } from './introspection';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport find from '../jsutils/find';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues'; // eslint-disable-next-line no-redeclare\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema = /*#__PURE__*/function () {\n  // Used as a cache for validateSchema().\n  // Referenced by validateSchema().\n  function GraphQLSchema(config) {\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"_queryType\", void 0);\n\n    _defineProperty(this, \"_mutationType\", void 0);\n\n    _defineProperty(this, \"_subscriptionType\", void 0);\n\n    _defineProperty(this, \"_directives\", void 0);\n\n    _defineProperty(this, \"_typeMap\", void 0);\n\n    _defineProperty(this, \"_implementations\", void 0);\n\n    _defineProperty(this, \"_possibleTypeMap\", void 0);\n\n    _defineProperty(this, \"__validationErrors\", void 0);\n\n    _defineProperty(this, \"__allowedLegacyNames\", void 0); // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n\n\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n      !(_typeof(config) === 'object') ? invariant(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? invariant(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\")) : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\")) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + \"\".concat(inspect(config.allowedLegacyNames), \".\")) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames || [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];\n    var types = config.types;\n\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    } // Keep track of all types referenced within the schema.\n\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap; // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n\n    var _arr = Object.keys(this._typeMap);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var typeName = _arr[_i];\n      var type = this._typeMap[typeName];\n\n      if (isObjectType(type)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = type.getInterfaces()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var iface = _step.value;\n\n            if (isInterfaceType(iface)) {\n              var impls = this._implementations[iface.name];\n\n              if (impls) {\n                impls.push(type);\n              } else {\n                this._implementations[iface.name] = [type];\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else if (isAbstractType(type) && !this._implementations[type.name]) {\n        this._implementations[type.name] = [];\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name];\n  };\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n\n    if (!possibleTypeMap) {\n      this._possibleTypeMap = possibleTypeMap = Object.create(null);\n    }\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        return map[type.name] = true, map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  return GraphQLSchema;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLSchema);\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  if (isWrappingType(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n\n  if (map[type.name]) {\n    !(map[type.name] === type) ? invariant(0, 'Schema must contain unique named types but contains multiple ' + \"types named \\\"\".concat(type.name, \"\\\".\")) : void 0;\n    return map;\n  }\n\n  map[type.name] = type;\n  var reducedMap = map;\n\n  if (isUnionType(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = objectValues(type.getFields())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var field = _step2.value;\n\n        if (field.args) {\n          var fieldArgTypes = field.args.map(function (arg) {\n            return arg.type;\n          });\n          reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n        }\n\n        reducedMap = typeMapReducer(reducedMap, field.type);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  if (isInputObjectType(type)) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = objectValues(type.getFields())[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _field = _step3.value;\n        reducedMap = typeMapReducer(reducedMap, _field.type);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","isAbstractType","isObjectType","isInterfaceType","isUnionType","isInputObjectType","isWrappingType","GraphQLDirective","isDirective","specifiedDirectives","inspect","__Schema","defineToStringTag","find","instanceOf","invariant","objectValues","isSchema","schema","GraphQLSchema","config","assumeValid","__validationErrors","types","Array","isArray","concat","directives","allowedLegacyNames","__allowedLegacyNames","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","astNode","extensionASTNodes","initialTypes","getQueryType","getMutationType","getSubscriptionType","typeMap","create","reduce","typeMapReducer","typeMapDirectiveReducer","_typeMap","_implementations","_arr","keys","_i","length","typeName","type","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getInterfaces","_step","next","done","iface","impls","name","push","err","return","_proto","getTypeMap","getType","getPossibleTypes","abstractType","getTypes","isPossibleType","possibleType","possibleTypeMap","_possibleTypeMap","possibleTypes","map","Boolean","getDirectives","getDirective","directive","ofType","reducedMap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getFields","_step2","field","args","fieldArgTypes","arg","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_field","_map"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/type/schema.mjs"],"sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAbstractType, isObjectType, isInterfaceType, isUnionType, isInputObjectType, isWrappingType } from './definition';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport inspect from '../jsutils/inspect';\nimport { __Schema } from './introspection';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport find from '../jsutils/find';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues';\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema =\n/*#__PURE__*/\nfunction () {\n  // Used as a cache for validateSchema().\n  // Referenced by validateSchema().\n  function GraphQLSchema(config) {\n    _defineProperty(this, \"astNode\", void 0);\n\n    _defineProperty(this, \"extensionASTNodes\", void 0);\n\n    _defineProperty(this, \"_queryType\", void 0);\n\n    _defineProperty(this, \"_mutationType\", void 0);\n\n    _defineProperty(this, \"_subscriptionType\", void 0);\n\n    _defineProperty(this, \"_directives\", void 0);\n\n    _defineProperty(this, \"_typeMap\", void 0);\n\n    _defineProperty(this, \"_implementations\", void 0);\n\n    _defineProperty(this, \"_possibleTypeMap\", void 0);\n\n    _defineProperty(this, \"__validationErrors\", void 0);\n\n    _defineProperty(this, \"__allowedLegacyNames\", void 0);\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n      !(_typeof(config) === 'object') ? invariant(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? invariant(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\")) : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\")) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + \"\".concat(inspect(config.allowedLegacyNames), \".\")) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames || [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];\n    var types = config.types;\n\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    } // Keep track of all types referenced within the schema.\n\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap; // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n\n    var _arr = Object.keys(this._typeMap);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var typeName = _arr[_i];\n      var type = this._typeMap[typeName];\n\n      if (isObjectType(type)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = type.getInterfaces()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var iface = _step.value;\n\n            if (isInterfaceType(iface)) {\n              var impls = this._implementations[iface.name];\n\n              if (impls) {\n                impls.push(type);\n              } else {\n                this._implementations[iface.name] = [type];\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else if (isAbstractType(type) && !this._implementations[type.name]) {\n        this._implementations[type.name] = [];\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name];\n  };\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n\n    if (!possibleTypeMap) {\n      this._possibleTypeMap = possibleTypeMap = Object.create(null);\n    }\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        return map[type.name] = true, map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  return GraphQLSchema;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLSchema);\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  if (isWrappingType(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n\n  if (map[type.name]) {\n    !(map[type.name] === type) ? invariant(0, 'Schema must contain unique named types but contains multiple ' + \"types named \\\"\".concat(type.name, \"\\\".\")) : void 0;\n    return map;\n  }\n\n  map[type.name] = type;\n  var reducedMap = map;\n\n  if (isUnionType(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = objectValues(type.getFields())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var field = _step2.value;\n\n        if (field.args) {\n          var fieldArgTypes = field.args.map(function (arg) {\n            return arg.type;\n          });\n          reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n        }\n\n        reducedMap = typeMapReducer(reducedMap, field.type);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  if (isInputObjectType(type)) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = objectValues(type.getFields())[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _field = _step3.value;\n        reducedMap = typeMapReducer(reducedMap, _field.type);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;EAAE,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;IAAEH,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;MAAE,OAAO,OAAOA,GAAd;IAAoB,CAAtD;EAAyD,CAApI,MAA0I;IAAED,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;IAA+H,CAAjK;EAAoK;;EAAC,OAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE/V,SAASK,eAAT,CAAyBL,GAAzB,EAA8BM,GAA9B,EAAmCC,KAAnC,EAA0C;EAAE,IAAID,GAAG,IAAIN,GAAX,EAAgB;IAAEQ,MAAM,CAACC,cAAP,CAAsBT,GAAtB,EAA2BM,GAA3B,EAAgC;MAAEC,KAAK,EAAEA,KAAT;MAAgBG,UAAU,EAAE,IAA5B;MAAkCC,YAAY,EAAE,IAAhD;MAAsDC,QAAQ,EAAE;IAAhE,CAAhC;EAA0G,CAA5H,MAAkI;IAAEZ,GAAG,CAACM,GAAD,CAAH,GAAWC,KAAX;EAAmB;;EAAC,OAAOP,GAAP;AAAa;AAEjN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,cAAT,EAAyBC,YAAzB,EAAuCC,eAAvC,EAAwDC,WAAxD,EAAqEC,iBAArE,EAAwFC,cAAxF,QAA8G,cAA9G;AACA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,mBAAxC,QAAmE,cAAnE;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB,C,CACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;EAC/B,OAAOJ,UAAU,CAACI,MAAD,EAASC,aAAT,CAAjB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIA,aAAa,GACxB,aACA,YAAY;EACV;EACA;EACA,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;IAC7B3B,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB,KAAK,CAAvB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,mBAAP,EAA4B,KAAK,CAAjC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,KAAK,CAA1B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAK,CAA7B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,mBAAP,EAA4B,KAAK,CAAjC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,KAAK,CAA3B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,kBAAP,EAA2B,KAAK,CAAhC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,kBAAP,EAA2B,KAAK,CAAhC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B,KAAK,CAAlC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,sBAAP,EAA+B,KAAK,CAApC,CAAf,CArB6B,CAuB7B;IACA;;;IACA,IAAI2B,MAAM,IAAIA,MAAM,CAACC,WAArB,EAAkC;MAChC,KAAKC,kBAAL,GAA0B,EAA1B;IACD,CAFD,MAEO;MACL;MACA;MACA,EAAEnC,OAAO,CAACiC,MAAD,CAAP,KAAoB,QAAtB,IAAkCL,SAAS,CAAC,CAAD,EAAI,oCAAJ,CAA3C,GAAuF,KAAK,CAA5F;MACA,EAAE,CAACK,MAAM,CAACG,KAAR,IAAiBC,KAAK,CAACC,OAAN,CAAcL,MAAM,CAACG,KAArB,CAAnB,IAAkDR,SAAS,CAAC,CAAD,EAAI,gDAAgDW,MAAhD,CAAuDhB,OAAO,CAACU,MAAM,CAACG,KAAR,CAA9D,EAA8E,GAA9E,CAAJ,CAA3D,GAAqJ,KAAK,CAA1J;MACA,EAAE,CAACH,MAAM,CAACO,UAAR,IAAsBH,KAAK,CAACC,OAAN,CAAcL,MAAM,CAACO,UAArB,CAAxB,IAA4DZ,SAAS,CAAC,CAAD,EAAI,qDAAqD,GAAGW,MAAH,CAAUhB,OAAO,CAACU,MAAM,CAACO,UAAR,CAAjB,EAAsC,GAAtC,CAAzD,CAArE,GAA4K,KAAK,CAAjL;MACA,EAAE,CAACP,MAAM,CAACQ,kBAAR,IAA8BJ,KAAK,CAACC,OAAN,CAAcL,MAAM,CAACQ,kBAArB,CAAhC,IAA4Eb,SAAS,CAAC,CAAD,EAAI,6DAA6D,GAAGW,MAAH,CAAUhB,OAAO,CAACU,MAAM,CAACQ,kBAAR,CAAjB,EAA8C,GAA9C,CAAjE,CAArF,GAA4M,KAAK,CAAjN;IACD;;IAED,KAAKC,oBAAL,GAA4BT,MAAM,CAACQ,kBAAP,IAA6B,EAAzD;IACA,KAAKE,UAAL,GAAkBV,MAAM,CAACW,KAAzB;IACA,KAAKC,aAAL,GAAqBZ,MAAM,CAACa,QAA5B;IACA,KAAKC,iBAAL,GAAyBd,MAAM,CAACe,YAAhC,CAvC6B,CAuCiB;;IAE9C,KAAKC,WAAL,GAAmBhB,MAAM,CAACO,UAAP,IAAqBlB,mBAAxC;IACA,KAAK4B,OAAL,GAAejB,MAAM,CAACiB,OAAtB;IACA,KAAKC,iBAAL,GAAyBlB,MAAM,CAACkB,iBAAhC,CA3C6B,CA2CsB;;IAEnD,IAAIC,YAAY,GAAG,CAAC,KAAKC,YAAL,EAAD,EAAsB,KAAKC,eAAL,EAAtB,EAA8C,KAAKC,mBAAL,EAA9C,EAA0E/B,QAA1E,CAAnB;IACA,IAAIY,KAAK,GAAGH,MAAM,CAACG,KAAnB;;IAEA,IAAIA,KAAJ,EAAW;MACTgB,YAAY,GAAGA,YAAY,CAACb,MAAb,CAAoBH,KAApB,CAAf;IACD,CAlD4B,CAkD3B;;;IAGF,IAAIoB,OAAO,GAAG/C,MAAM,CAACgD,MAAP,CAAc,IAAd,CAAd,CArD6B,CAqDM;;IAEnCD,OAAO,GAAGJ,YAAY,CAACM,MAAb,CAAoBC,cAApB,EAAoCH,OAApC,CAAV,CAvD6B,CAuD2B;;IAExDA,OAAO,GAAG,KAAKP,WAAL,CAAiBS,MAAjB,CAAwBE,uBAAxB,EAAiDJ,OAAjD,CAAV,CAzD6B,CAyDwC;;IAErE,KAAKK,QAAL,GAAgBL,OAAhB,CA3D6B,CA2DJ;;IAEzB,KAAKM,gBAAL,GAAwBrD,MAAM,CAACgD,MAAP,CAAc,IAAd,CAAxB;;IAEA,IAAIM,IAAI,GAAGtD,MAAM,CAACuD,IAAP,CAAY,KAAKH,QAAjB,CAAX;;IAEA,KAAK,IAAII,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,IAAI,CAACG,MAA3B,EAAmCD,EAAE,EAArC,EAAyC;MACvC,IAAIE,QAAQ,GAAGJ,IAAI,CAACE,EAAD,CAAnB;MACA,IAAIG,IAAI,GAAG,KAAKP,QAAL,CAAcM,QAAd,CAAX;;MAEA,IAAIpD,YAAY,CAACqD,IAAD,CAAhB,EAAwB;QACtB,IAAIC,yBAAyB,GAAG,IAAhC;QACA,IAAIC,iBAAiB,GAAG,KAAxB;QACA,IAAIC,cAAc,GAAGC,SAArB;;QAEA,IAAI;UACF,KAAK,IAAIC,SAAS,GAAGL,IAAI,CAACM,aAAL,GAAqBxE,MAAM,CAACC,QAA5B,GAAhB,EAAyDwE,KAA9D,EAAqE,EAAEN,yBAAyB,GAAG,CAACM,KAAK,GAAGF,SAAS,CAACG,IAAV,EAAT,EAA2BC,IAAzD,CAArE,EAAqIR,yBAAyB,GAAG,IAAjK,EAAuK;YACrK,IAAIS,KAAK,GAAGH,KAAK,CAACnE,KAAlB;;YAEA,IAAIQ,eAAe,CAAC8D,KAAD,CAAnB,EAA4B;cAC1B,IAAIC,KAAK,GAAG,KAAKjB,gBAAL,CAAsBgB,KAAK,CAACE,IAA5B,CAAZ;;cAEA,IAAID,KAAJ,EAAW;gBACTA,KAAK,CAACE,IAAN,CAAWb,IAAX;cACD,CAFD,MAEO;gBACL,KAAKN,gBAAL,CAAsBgB,KAAK,CAACE,IAA5B,IAAoC,CAACZ,IAAD,CAApC;cACD;YACF;UACF;QACF,CAdD,CAcE,OAAOc,GAAP,EAAY;UACZZ,iBAAiB,GAAG,IAApB;UACAC,cAAc,GAAGW,GAAjB;QACD,CAjBD,SAiBU;UACR,IAAI;YACF,IAAI,CAACb,yBAAD,IAA8BI,SAAS,CAACU,MAAV,IAAoB,IAAtD,EAA4D;cAC1DV,SAAS,CAACU,MAAV;YACD;UACF,CAJD,SAIU;YACR,IAAIb,iBAAJ,EAAuB;cACrB,MAAMC,cAAN;YACD;UACF;QACF;MACF,CAjCD,MAiCO,IAAIzD,cAAc,CAACsD,IAAD,CAAd,IAAwB,CAAC,KAAKN,gBAAL,CAAsBM,IAAI,CAACY,IAA3B,CAA7B,EAA+D;QACpE,KAAKlB,gBAAL,CAAsBM,IAAI,CAACY,IAA3B,IAAmC,EAAnC;MACD;IACF;EACF;;EAED,IAAII,MAAM,GAAGpD,aAAa,CAAC3B,SAA3B;;EAEA+E,MAAM,CAAC/B,YAAP,GAAsB,SAASA,YAAT,GAAwB;IAC5C,OAAO,KAAKV,UAAZ;EACD,CAFD;;EAIAyC,MAAM,CAAC9B,eAAP,GAAyB,SAASA,eAAT,GAA2B;IAClD,OAAO,KAAKT,aAAZ;EACD,CAFD;;EAIAuC,MAAM,CAAC7B,mBAAP,GAA6B,SAASA,mBAAT,GAA+B;IAC1D,OAAO,KAAKR,iBAAZ;EACD,CAFD;;EAIAqC,MAAM,CAACC,UAAP,GAAoB,SAASA,UAAT,GAAsB;IACxC,OAAO,KAAKxB,QAAZ;EACD,CAFD;;EAIAuB,MAAM,CAACE,OAAP,GAAiB,SAASA,OAAT,CAAiBN,IAAjB,EAAuB;IACtC,OAAO,KAAKK,UAAL,GAAkBL,IAAlB,CAAP;EACD,CAFD;;EAIAI,MAAM,CAACG,gBAAP,GAA0B,SAASA,gBAAT,CAA0BC,YAA1B,EAAwC;IAChE,IAAIvE,WAAW,CAACuE,YAAD,CAAf,EAA+B;MAC7B,OAAOA,YAAY,CAACC,QAAb,EAAP;IACD;;IAED,OAAO,KAAK3B,gBAAL,CAAsB0B,YAAY,CAACR,IAAnC,CAAP;EACD,CAND;;EAQAI,MAAM,CAACM,cAAP,GAAwB,SAASA,cAAT,CAAwBF,YAAxB,EAAsCG,YAAtC,EAAoD;IAC1E,IAAIC,eAAe,GAAG,KAAKC,gBAA3B;;IAEA,IAAI,CAACD,eAAL,EAAsB;MACpB,KAAKC,gBAAL,GAAwBD,eAAe,GAAGnF,MAAM,CAACgD,MAAP,CAAc,IAAd,CAA1C;IACD;;IAED,IAAI,CAACmC,eAAe,CAACJ,YAAY,CAACR,IAAd,CAApB,EAAyC;MACvC,IAAIc,aAAa,GAAG,KAAKP,gBAAL,CAAsBC,YAAtB,CAApB;MACAI,eAAe,CAACJ,YAAY,CAACR,IAAd,CAAf,GAAqCc,aAAa,CAACpC,MAAd,CAAqB,UAAUqC,GAAV,EAAe3B,IAAf,EAAqB;QAC7E,OAAO2B,GAAG,CAAC3B,IAAI,CAACY,IAAN,CAAH,GAAiB,IAAjB,EAAuBe,GAA9B;MACD,CAFoC,EAElCtF,MAAM,CAACgD,MAAP,CAAc,IAAd,CAFkC,CAArC;IAGD;;IAED,OAAOuC,OAAO,CAACJ,eAAe,CAACJ,YAAY,CAACR,IAAd,CAAf,CAAmCW,YAAY,CAACX,IAAhD,CAAD,CAAd;EACD,CAfD;;EAiBAI,MAAM,CAACa,aAAP,GAAuB,SAASA,aAAT,GAAyB;IAC9C,OAAO,KAAKhD,WAAZ;EACD,CAFD;;EAIAmC,MAAM,CAACc,YAAP,GAAsB,SAASA,YAAT,CAAsBlB,IAAtB,EAA4B;IAChD,OAAOtD,IAAI,CAAC,KAAKuE,aAAL,EAAD,EAAuB,UAAUE,SAAV,EAAqB;MACrD,OAAOA,SAAS,CAACnB,IAAV,KAAmBA,IAA1B;IACD,CAFU,CAAX;EAGD,CAJD;;EAMA,OAAOhD,aAAP;AACD,CAzKD,EAFO,C,CA2KF;;AAELP,iBAAiB,CAACO,aAAD,CAAjB;;AAEA,SAAS2B,cAAT,CAAwBoC,GAAxB,EAA6B3B,IAA7B,EAAmC;EACjC,IAAI,CAACA,IAAL,EAAW;IACT,OAAO2B,GAAP;EACD;;EAED,IAAI5E,cAAc,CAACiD,IAAD,CAAlB,EAA0B;IACxB,OAAOT,cAAc,CAACoC,GAAD,EAAM3B,IAAI,CAACgC,MAAX,CAArB;EACD;;EAED,IAAIL,GAAG,CAAC3B,IAAI,CAACY,IAAN,CAAP,EAAoB;IAClB,EAAEe,GAAG,CAAC3B,IAAI,CAACY,IAAN,CAAH,KAAmBZ,IAArB,IAA6BxC,SAAS,CAAC,CAAD,EAAI,kEAAkE,iBAAiBW,MAAjB,CAAwB6B,IAAI,CAACY,IAA7B,EAAmC,KAAnC,CAAtE,CAAtC,GAAyJ,KAAK,CAA9J;IACA,OAAOe,GAAP;EACD;;EAEDA,GAAG,CAAC3B,IAAI,CAACY,IAAN,CAAH,GAAiBZ,IAAjB;EACA,IAAIiC,UAAU,GAAGN,GAAjB;;EAEA,IAAI9E,WAAW,CAACmD,IAAD,CAAf,EAAuB;IACrBiC,UAAU,GAAGjC,IAAI,CAACqB,QAAL,GAAgB/B,MAAhB,CAAuBC,cAAvB,EAAuC0C,UAAvC,CAAb;EACD;;EAED,IAAItF,YAAY,CAACqD,IAAD,CAAhB,EAAwB;IACtBiC,UAAU,GAAGjC,IAAI,CAACM,aAAL,GAAqBhB,MAArB,CAA4BC,cAA5B,EAA4C0C,UAA5C,CAAb;EACD;;EAED,IAAItF,YAAY,CAACqD,IAAD,CAAZ,IAAsBpD,eAAe,CAACoD,IAAD,CAAzC,EAAiD;IAC/C,IAAIkC,0BAA0B,GAAG,IAAjC;IACA,IAAIC,kBAAkB,GAAG,KAAzB;IACA,IAAIC,eAAe,GAAGhC,SAAtB;;IAEA,IAAI;MACF,KAAK,IAAIiC,UAAU,GAAG5E,YAAY,CAACuC,IAAI,CAACsC,SAAL,EAAD,CAAZ,CAA+BxG,MAAM,CAACC,QAAtC,GAAjB,EAAoEwG,MAAzE,EAAiF,EAAEL,0BAA0B,GAAG,CAACK,MAAM,GAAGF,UAAU,CAAC7B,IAAX,EAAV,EAA6BC,IAA5D,CAAjF,EAAoJyB,0BAA0B,GAAG,IAAjL,EAAuL;QACrL,IAAIM,KAAK,GAAGD,MAAM,CAACnG,KAAnB;;QAEA,IAAIoG,KAAK,CAACC,IAAV,EAAgB;UACd,IAAIC,aAAa,GAAGF,KAAK,CAACC,IAAN,CAAWd,GAAX,CAAe,UAAUgB,GAAV,EAAe;YAChD,OAAOA,GAAG,CAAC3C,IAAX;UACD,CAFmB,CAApB;UAGAiC,UAAU,GAAGS,aAAa,CAACpD,MAAd,CAAqBC,cAArB,EAAqC0C,UAArC,CAAb;QACD;;QAEDA,UAAU,GAAG1C,cAAc,CAAC0C,UAAD,EAAaO,KAAK,CAACxC,IAAnB,CAA3B;MACD;IACF,CAbD,CAaE,OAAOc,GAAP,EAAY;MACZqB,kBAAkB,GAAG,IAArB;MACAC,eAAe,GAAGtB,GAAlB;IACD,CAhBD,SAgBU;MACR,IAAI;QACF,IAAI,CAACoB,0BAAD,IAA+BG,UAAU,CAACtB,MAAX,IAAqB,IAAxD,EAA8D;UAC5DsB,UAAU,CAACtB,MAAX;QACD;MACF,CAJD,SAIU;QACR,IAAIoB,kBAAJ,EAAwB;UACtB,MAAMC,eAAN;QACD;MACF;IACF;EACF;;EAED,IAAItF,iBAAiB,CAACkD,IAAD,CAArB,EAA6B;IAC3B,IAAI4C,0BAA0B,GAAG,IAAjC;IACA,IAAIC,kBAAkB,GAAG,KAAzB;IACA,IAAIC,eAAe,GAAG1C,SAAtB;;IAEA,IAAI;MACF,KAAK,IAAI2C,UAAU,GAAGtF,YAAY,CAACuC,IAAI,CAACsC,SAAL,EAAD,CAAZ,CAA+BxG,MAAM,CAACC,QAAtC,GAAjB,EAAoEiH,MAAzE,EAAiF,EAAEJ,0BAA0B,GAAG,CAACI,MAAM,GAAGD,UAAU,CAACvC,IAAX,EAAV,EAA6BC,IAA5D,CAAjF,EAAoJmC,0BAA0B,GAAG,IAAjL,EAAuL;QACrL,IAAIK,MAAM,GAAGD,MAAM,CAAC5G,KAApB;QACA6F,UAAU,GAAG1C,cAAc,CAAC0C,UAAD,EAAagB,MAAM,CAACjD,IAApB,CAA3B;MACD;IACF,CALD,CAKE,OAAOc,GAAP,EAAY;MACZ+B,kBAAkB,GAAG,IAArB;MACAC,eAAe,GAAGhC,GAAlB;IACD,CARD,SAQU;MACR,IAAI;QACF,IAAI,CAAC8B,0BAAD,IAA+BG,UAAU,CAAChC,MAAX,IAAqB,IAAxD,EAA8D;UAC5DgC,UAAU,CAAChC,MAAX;QACD;MACF,CAJD,SAIU;QACR,IAAI8B,kBAAJ,EAAwB;UACtB,MAAMC,eAAN;QACD;MACF;IACF;EACF;;EAED,OAAOb,UAAP;AACD;;AAED,SAASzC,uBAAT,CAAiCmC,GAAjC,EAAsCI,SAAtC,EAAiD;EAC/C;EACA,IAAI,CAAC9E,WAAW,CAAC8E,SAAD,CAAhB,EAA6B;IAC3B,OAAOJ,GAAP;EACD;;EAED,OAAOI,SAAS,CAACU,IAAV,CAAenD,MAAf,CAAsB,UAAU4D,IAAV,EAAgBP,GAAhB,EAAqB;IAChD,OAAOpD,cAAc,CAAC2D,IAAD,EAAOP,GAAG,CAAC3C,IAAX,CAArB;EACD,CAFM,EAEJ2B,GAFI,CAAP;AAGD"},"metadata":{},"sourceType":"module"}