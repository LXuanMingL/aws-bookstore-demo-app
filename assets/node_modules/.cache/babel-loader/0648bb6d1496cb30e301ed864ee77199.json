{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","map":{"version":3,"names":["inspect","Source","syntaxError","createLexer","TokenKind","getTokenDesc","Kind","DirectiveLocation","parse","source","options","sourceObj","TypeError","concat","lexer","parseDocument","parseValue","expect","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","parseVariableDefinition","PAREN_R","experimentalVariableDefinitionDirectives","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","skip","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseConstValue","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","parseNamedType","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","push","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","match","atToken","openKind","parseFn","closeKind","nodes"],"sources":["/home/xl355/341/aws-bookstore-demo-app/assets/node_modules/@aws-amplify/api/node_modules/graphql/language/parser.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}